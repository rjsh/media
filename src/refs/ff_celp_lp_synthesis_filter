<dec f='ffmpeg/libavcodec/celp_filters.h' l='125' type='int ff_celp_lp_synthesis_filter(int16_t * out, const int16_t * filter_coeffs, const int16_t * in, int buffer_length, int filter_length, int stop_on_overflow, int shift, int rounder)'/>
<doc f='ffmpeg/libavcodec/celp_filters.h' l='106'>/**
 * LP synthesis filter.
 * @param[out] out pointer to output buffer
 * @param filter_coeffs filter coefficients (-0x8000 &lt;= (3.12) &lt; 0x8000)
 * @param in input signal
 * @param buffer_length amount of data to process
 * @param filter_length filter length (10 for 10th order LP filter)
 * @param stop_on_overflow   1 - return immediately if overflow occurs
 *                           0 - ignore overflows
 * @param shift the result is shifted right by this value
 * @param rounder the amount to add for rounding (usually 0x800 or 0xfff)
 *
 * @return 1 if overflow occurred, 0 - otherwise
 *
 * @note Output buffer must contain filter_length samples of past
 *       speech data before pointer.
 *
 * Routine applies 1/A(z) filter to given speech data.
 */</doc>
<def f='ffmpeg/libavcodec/celp_filters.c' l='60' type='int ff_celp_lp_synthesis_filter(int16_t * out, const int16_t * filter_coeffs, const int16_t * in, int buffer_length, int filter_length, int stop_on_overflow, int shift, int rounder)'/>
<use f='ffmpeg/libavcodec/g723_1dec.c' l='984' u='c' c='g723_1_decode_frame'/>
<use f='ffmpeg/libavcodec/g729dec.c' l='611' u='c' c='decode_frame'/>
<use f='ffmpeg/libavcodec/g729dec.c' l='633' u='c' c='decode_frame'/>
<use f='ffmpeg/libavcodec/g729dec.c' l='643' u='c' c='decode_frame'/>
<use f='ffmpeg/libavcodec/g729postfilter.c' l='439' u='c' c='get_tilt_comp'/>
<use f='ffmpeg/libavcodec/g729postfilter.c' l='559' u='c' c='ff_g729_postfilter'/>
<use f='ffmpeg/libavcodec/ra144.c' l='1721' u='c' c='ff_subblock_synthesis'/>
