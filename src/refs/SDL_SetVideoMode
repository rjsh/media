<dec f='include/SDL/SDL_video.h' l='384' type='SDL_Surface * SDL_SetVideoMode(int width, int height, int bpp, Uint32 flags)'/>
<doc f='include/SDL/SDL_video.h' l='326'>/**
 * Set up a video mode with the specified width, height and bits-per-pixel.
 *
 * If &apos;bpp&apos; is 0, it is treated as the current display bits per pixel.
 *
 * If SDL_ANYFORMAT is set in &apos;flags&apos;, the SDL library will try to set the
 * requested bits-per-pixel, but will return whatever video pixel format is
 * available.  The default is to emulate the requested pixel format if it
 * is not natively available.
 *
 * If SDL_HWSURFACE is set in &apos;flags&apos;, the video surface will be placed in
 * video memory, if possible, and you may have to call SDL_LockSurface()
 * in order to access the raw framebuffer.  Otherwise, the video surface
 * will be created in system memory.
 *
 * If SDL_ASYNCBLIT is set in &apos;flags&apos;, SDL will try to perform rectangle
 * updates asynchronously, but you must always lock before accessing pixels.
 * SDL will wait for updates to complete before returning from the lock.
 *
 * If SDL_HWPALETTE is set in &apos;flags&apos;, the SDL library will guarantee
 * that the colors set by SDL_SetColors() will be the colors you get.
 * Otherwise, in 8-bit mode, SDL_SetColors() may not be able to set all
 * of the colors exactly the way they are requested, and you should look
 * at the video surface structure to determine the actual palette.
 * If SDL cannot guarantee that the colors you request can be set, 
 * i.e. if the colormap is shared, then the video surface may be created
 * under emulation in system memory, overriding the SDL_HWSURFACE flag.
 *
 * If SDL_FULLSCREEN is set in &apos;flags&apos;, the SDL library will try to set
 * a fullscreen video mode.  The default is to create a windowed mode
 * if the current graphics system has a window manager.
 * If the SDL library is able to set a fullscreen video mode, this flag 
 * will be set in the surface that is returned.
 *
 * If SDL_DOUBLEBUF is set in &apos;flags&apos;, the SDL library will try to set up
 * two surfaces in video memory and swap between them when you call 
 * SDL_Flip().  This is usually slower than the normal single-buffering
 * scheme, but prevents &quot;tearing&quot; artifacts caused by modifying video 
 * memory while the monitor is refreshing.  It should only be used by 
 * applications that redraw the entire screen on every update.
 *
 * If SDL_RESIZABLE is set in &apos;flags&apos;, the SDL library will allow the
 * window manager, if any, to resize the window at runtime.  When this
 * occurs, SDL will send a SDL_VIDEORESIZE event to you application,
 * and you must respond to the event by re-calling SDL_SetVideoMode()
 * with the requested size (or another size that suits the application).
 *
 * If SDL_NOFRAME is set in &apos;flags&apos;, the SDL library will create a window
 * without any title bar or frame decoration.  Fullscreen video modes have
 * this flag set automatically.
 *
 * This function returns the video framebuffer surface, or NULL if it fails.
 *
 * If you rely on functionality provided by certain video flags, check the
 * flags of the returned surface to make sure that functionality is available.
 * SDL will fall back to reduced functionality if the exact flags you wanted
 * are not available.
 */</doc>
<use f='vlc/modules/video_output/sdl.c' l='196' u='c' c='Open'/>
<use f='vlc/modules/video_output/sdl.c' l='480' u='c' c='Control'/>
<use f='vlc/modules/video_output/sdl.c' l='484' u='c' c='Control'/>
<use f='vlc/modules/video_output/sdl.c' l='508' u='c' c='Control'/>
<use f='vlc/modules/video_output/sdl.c' l='530' u='c' c='Control'/>
