<dec f='ffmpeg/libavcodec/celp_filters.h' l='103' type='void ff_celp_circ_addf(float * out, const float * in, const float * lagged, int lag, float fac, int n)'/>
<use f='ffmpeg/libavcodec/amrnbdec.c' l='682' u='c' c='apply_ir_filter'/>
<use f='ffmpeg/libavcodec/amrnbdec.c' l='686' u='c' c='apply_ir_filter'/>
<use f='ffmpeg/libavcodec/amrnbdec.c' l='703' u='c' c='apply_ir_filter'/>
<doc f='ffmpeg/libavcodec/celp_filters.h' l='91'>/**
 * Add an array to a rotated array.
 *
 * out[k] = in[k] + fac * lagged[k-lag] with wrap-around
 *
 * @param out result vector
 * @param in samples to be added unfiltered
 * @param lagged samples to be rotated, multiplied and added
 * @param lag lagged vector delay in the range [0, n]
 * @param fac scalefactor for lagged samples
 * @param n number of samples
 */</doc>
<use f='ffmpeg/libavcodec/amrwbdec.c' l='679' u='c' c='anti_sparseness'/>
<def f='ffmpeg/libavcodec/celp_filters.c' l='50' type='void ff_celp_circ_addf(float * out, const float * in, const float * lagged, int lag, float fac, int n)'/>
