<dec f='vlc/include/vlc_block.h' l='312' type='void block_FifoPace(block_fifo_t * fifo, size_t max_depth, size_t max_size)'/>
<use f='vlc/modules/access/udp.c' l='250' u='c' c='ThreadRead'/>
<use f='vlc/src/input/decoder.c' l='379' u='c' c='input_DecoderDecode'/>
<def f='vlc/src/misc/block.c' l='593' type='void block_FifoPace(block_fifo_t * fifo, size_t max_depth, size_t max_size)'/>
<doc f='vlc/src/misc/block.c' l='576'>/**
 * Wait until the FIFO gets below a certain size (if needed).
 *
 * Note that if more than one thread writes to the FIFO, you cannot assume that
 * the FIFO is actually below the requested size upon return (since another
 * thread could have refilled it already). This is typically not an issue, as
 * this function is meant for (relaxed) congestion control.
 *
 * This function may be a cancellation point and it is cancel-safe.
 *
 * @param fifo queue to wait on
 * @param max_depth wait until the queue has no more than this many blocks
 *                  (use SIZE_MAX to ignore this constraint)
 * @param max_size wait until the queue has no more than this many bytes
 *                  (use SIZE_MAX to ignore this constraint)
 * @return nothing.
 */</doc>
