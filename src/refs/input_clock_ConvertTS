<dec f='vlc/src/input/clock.h' l='111' type='int input_clock_ConvertTS(input_clock_t * , int * pi_rate, mtime_t * pi_ts0, mtime_t * pi_ts1, mtime_t i_ts_bound)'/>
<def f='vlc/src/input/clock.c' l='407' type='int input_clock_ConvertTS(input_clock_t * cl, int * pi_rate, mtime_t * pi_ts0, mtime_t * pi_ts1, mtime_t i_ts_bound)'/>
<doc f='vlc/src/input/clock.c' l='404'>/*****************************************************************************
 * input_clock_ConvertTS
 *****************************************************************************/</doc>
<doc f='vlc/src/input/clock.h' l='97'>/**
 * This function converts a pair of timestamp from stream clock to system clock.
 *
 * If pi_rate is provided it will be filled with the rate value used for
 * the conversion.
 * p_ts0 is a pointer to a timestamp to be converted (in place) and must be non NULL.
 * p_ts1 is a pointer to a timestamp to be converted (in place) and can be NULL.
 *
 * It will return VLC_EGENERIC if i_ts_bound is not INT64_MAX and if the value *p_ts0
 * after conversion is not before the deadline mdate() + i_pts_delay + i_ts_bound.
 * It will also return VLC_EGENERIC if the conversion cannot be done successfully. In
 * this case, *p_ts0 and *p_ts1 will hold an invalid timestamp.
 * Otherwise it will return VLC_SUCCESS.
 */</doc>
<use f='vlc/src/input/decoder.c' l='669' u='c' c='DecoderGetDisplayDate'/>
<use f='vlc/src/input/decoder.c' l='1068' u='c' c='DecoderFixTs'/>
