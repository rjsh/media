<dec f='ffmpeg/libavformat/avformat.h' l='438' type='int av_append_packet(AVIOContext * s, AVPacket * pkt, int size)'/>
<doc f='ffmpeg/libavformat/avformat.h' l='424'>/**
 * Read data and append it to the current content of the AVPacket.
 * If pkt-&gt;size is 0 this is identical to av_get_packet.
 * Note that this uses av_grow_packet and thus involves a realloc
 * which is inefficient. Thus this function should only be used
 * when there is no reasonable way to know (an upper bound of)
 * the final size.
 *
 * @param s    associated IO context
 * @param pkt packet
 * @param size amount of data to read
 * @return &gt;0 (read size) if OK, AVERROR_xxx otherwise, previous data
 *         will not be lost even if an error occurs.
 */</doc>
<use f='ffmpeg/libavformat/apngdec.c' l='367' u='c' c='apng_read_packet'/>
<use f='ffmpeg/libavformat/apngdec.c' l='381' u='c' c='apng_read_packet'/>
<use f='ffmpeg/libavformat/dfa.c' l='94' u='c' c='dfa_read_packet'/>
<use f='ffmpeg/libavformat/dfa.c' l='116' u='c' c='dfa_read_packet'/>
<use f='ffmpeg/libavformat/electronicarts.c' l='716' u='c' c='ea_read_packet'/>
<use f='ffmpeg/libavformat/iv8.c' l='92' u='c' c='read_packet'/>
<use f='ffmpeg/libavformat/mpjpegdec.c' l='345' u='c' c='mpjpeg_read_packet'/>
<use f='ffmpeg/libavformat/supdec.c' l='64' u='c' c='sup_read_packet'/>
<def f='ffmpeg/libavformat/utils.c' l='299' type='int av_append_packet(AVIOContext * s, AVPacket * pkt, int size)'/>
<use f='ffmpeg/libavformat/vivo.c' l='289' u='c' c='vivo_read_packet'/>
<use f='ffmpeg/libavformat/wc3movie.c' l='149' u='c' c='wc3_read_header'/>
<use f='ffmpeg/libavformat/wc3movie.c' l='226' u='c' c='wc3_read_packet'/>
<use f='ffmpeg/libavformat/wc3movie.c' l='232' u='c' c='wc3_read_packet'/>
<dec f='include/libavformat/avformat.h' l='317' type='int av_append_packet(AVIOContext * s, AVPacket * pkt, int size)'/>
<doc f='include/libavformat/avformat.h' l='304'>/**
 * Read data and append it to the current content of the AVPacket.
 * If pkt-&gt;size is 0 this is identical to av_get_packet.
 * Note that this uses av_grow_packet and thus involves a realloc
 * which is inefficient. Thus this function should only be used
 * when there is no reasonable way to know (an upper bound of)
 * the final size.
 *
 * @param pkt packet
 * @param size amount of data to read
 * @return &gt;0 (read size) if OK, AVERROR_xxx otherwise, previous data
 *         will not be lost even if an error occurs.
 */</doc>
