<dec f='vlc/include/vlc_block.h' l='317' type='block_t * block_FifoShow(block_fifo_t * )'/>
<use f='vlc/modules/mux/avi.c' l='502' u='c' c='Mux'/>
<use f='vlc/modules/mux/mp4.c' l='475' u='c' c='Mux'/>
<use f='vlc/modules/mux/mpeg/ts.c' l='1275' u='c' c='MuxStreams'/>
<use f='vlc/modules/mux/mpeg/ts.c' l='1313' u='c' c='MuxStreams'/>
<use f='vlc/modules/mux/mpeg/ts.c' l='1601' u='c' c='FixPES'/>
<use f='vlc/modules/mux/mpeg/ts.c' l='1631' u='c' c='FixPES'/>
<def f='vlc/src/misc/block.c' l='708' type='block_t * block_FifoShow(block_fifo_t * p_fifo)'/>
<doc f='vlc/src/misc/block.c' l='697'>/**
 * Peeks the first block in the FIFO.
 * If necessary, wait until there is one block.
 * This function is (always) a cancellation point.
 *
 * @warning This function leaves the block in the FIFO.
 * You need to protect against concurrent threads who could dequeue the block.
 * Preferrably, there should be only one thread reading from the FIFO.
 *
 * @return a valid block.
 */</doc>
<use f='vlc/src/stream_output/stream_output.c' l='562' u='c' c='sout_MuxGetStream'/>
