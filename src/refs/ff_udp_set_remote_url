<dec f='ffmpeg/libavformat/url.h' l='270' type='int ff_udp_set_remote_url(URLContext * h, const char * uri)'/>
<doc f='ffmpeg/libavformat/url.h' l='269'>/* udp.c */</doc>
<use f='ffmpeg/libavformat/rtpproto.c' l='120' u='c' c='ff_rtp_set_remote_url'/>
<use f='ffmpeg/libavformat/rtpproto.c' l='123' u='c' c='ff_rtp_set_remote_url'/>
<def f='ffmpeg/libavformat/udp.c' l='442' type='int ff_udp_set_remote_url(URLContext * h, const char * uri)'/>
<use f='ffmpeg/libavformat/udp.c' l='812' u='c' c='udp_open'/>
<doc f='ffmpeg/libavformat/udp.c' l='426'>/**
 * If no filename is given to av_open_input_file because you want to
 * get the local port first, then you must call this function to set
 * the remote server address.
 *
 * url syntax: udp://host:port[?option=val...]
 * option: &apos;ttl=n&apos;       : set the ttl value (for multicast only)
 *         &apos;localport=n&apos; : set the local port
 *         &apos;pkt_size=n&apos;  : set max packet size
 *         &apos;reuse=1&apos;     : enable reusing the socket
 *         &apos;overrun_nonfatal=1&apos;: survive in case of circular buffer overrun
 *
 * @param h media file context
 * @param uri of the remote server
 * @return zero if no error.
 */</doc>
