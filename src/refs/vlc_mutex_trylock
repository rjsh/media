<dec f='vlc/include/vlc_threads.h' l='231' type='int vlc_mutex_trylock(vlc_mutex_t * )'/>
<use f='vlc/src/audio_output/output.c' l='548' u='c' c='aout_OutputTryLock'/>
<def f='vlc/src/posix/thread.c' l='275' type='int vlc_mutex_trylock(vlc_mutex_t * p_mutex)'/>
<doc f='vlc/src/posix/thread.c' l='260'>/**
 * Acquires a mutex if and only if it is not currently held by another thread.
 * This function never sleeps and can be used in delay-critical code paths.
 * This function is not a cancellation-point.
 *
 * &lt;b&gt;Beware&lt;/b&gt;: If this function fails, then the mutex is held... by another
 * thread. The calling thread must deal with the error appropriately. That
 * typically implies postponing the operations that would have required the
 * mutex. If the thread cannot defer those operations, then it must use
 * vlc_mutex_lock(). If in doubt, use vlc_mutex_lock() instead.
 *
 * @param p_mutex mutex initialized with vlc_mutex_init() or
 *                vlc_mutex_init_recursive()
 * @return 0 if the mutex could be acquired, an error code otherwise.
 */</doc>
<use f='vlc/src/video_output/snapshot.c' l='107' u='c' c='vout_snapshot_IsRequested'/>
