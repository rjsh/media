<dec f='vlc/src/libvlc.h' l='239' type='counter_t * stats_CounterCreate(int )'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitStatistics'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitSout'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitSout'/>
<use f='vlc/src/input/input.c' l='825' u='c' c='InitSout'/>
<def f='vlc/src/input/stats.c' l='38' type='counter_t * stats_CounterCreate(int i_compute_type)'/>
<doc f='vlc/src/input/stats.c' l='31'>/**
 * Create a statistics counter
 * \param i_compute_type the aggregation type. One of STATS_LAST (always
 * keep the last value), STATS_COUNTER (increment by the passed value),
 * STATS_MAX (keep the maximum passed value), STATS_MIN, or STATS_DERIVATIVE
 * (keep a time derivative of the value)
 */</doc>
