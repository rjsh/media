<dec f='ffmpeg/libavutil/samplefmt.h' l='202' type='int av_samples_fill_arrays(uint8_t ** audio_data, int * linesize, const uint8_t * buf, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)'/>
<doc f='ffmpeg/libavutil/samplefmt.h' l='172'>/**
 * Fill plane data pointers and linesize for samples with sample
 * format sample_fmt.
 *
 * The audio_data array is filled with the pointers to the samples data planes:
 * for planar, set the start point of each channel&apos;s data within the buffer,
 * for packed, set the start point of the entire buffer only.
 *
 * The value pointed to by linesize is set to the aligned size of each
 * channel&apos;s data buffer for planar layout, or to the aligned size of the
 * buffer for all channels for packed layout.
 *
 * The buffer in buf must be big enough to contain all the samples
 * (use av_samples_get_buffer_size() to compute its minimum size),
 * otherwise the audio_data pointers will point to invalid data.
 *
 * @see enum AVSampleFormat
 * The documentation for AVSampleFormat describes the data layout.
 *
 * @param[out] audio_data  array to be filled with the pointer for each channel
 * @param[out] linesize    calculated linesize, may be NULL
 * @param buf              the pointer to a buffer containing the samples
 * @param nb_channels      the number of channels
 * @param nb_samples       the number of samples in a single channel
 * @param sample_fmt       the sample format
 * @param align            buffer size alignment (0 = default, 1 = no alignment)
 * @return                 &gt;=0 on success or a negative error code on failure
 * @todo return minimum size in bytes required for the buffer in case
 * of success at the next bump
 */</doc>
<use f='ffmpeg/libavcodec/flacdec.c' l='150' u='c' c='allocate_buffers'/>
<use f='ffmpeg/libavcodec/takdec.c' l='757' u='c' c='tak_decode_frame'/>
<use f='ffmpeg/libavcodec/utils.c' l='491' u='c' c='avcodec_fill_audio_frame'/>
<def f='ffmpeg/libavutil/samplefmt.c' l='151' type='int av_samples_fill_arrays(uint8_t ** audio_data, int * linesize, const uint8_t * buf, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)'/>
<use f='ffmpeg/libavutil/samplefmt.c' l='186' u='c' c='av_samples_alloc'/>
<dec f='include/libavutil/samplefmt.h' l='168' type='int av_samples_fill_arrays(uint8_t ** audio_data, int * linesize, const uint8_t * buf, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)'/>
<doc f='include/libavutil/samplefmt.h' l='144'>/**
 * Fill channel data pointers and linesize for samples with sample
 * format sample_fmt.
 *
 * The pointers array is filled with the pointers to the samples data:
 * for planar, set the start point of each channel&apos;s data within the buffer,
 * for packed, set the start point of the entire buffer only.
 *
 * The linesize array is filled with the aligned size of each channel&apos;s data
 * buffer for planar layout, or the aligned size of the buffer for all channels
 * for packed layout.
 *
 * @see enum AVSampleFormat
 * The documentation for AVSampleFormat describes the data layout.
 *
 * @param[out] audio_data  array to be filled with the pointer for each channel
 * @param[out] linesize    calculated linesize, may be NULL
 * @param buf              the pointer to a buffer containing the samples
 * @param nb_channels      the number of channels
 * @param nb_samples       the number of samples in a single channel
 * @param sample_fmt       the sample format
 * @param align            buffer size alignment (0 = default, 1 = no alignment)
 * @return                 0 on success or a negative error code on failure
 */</doc>
