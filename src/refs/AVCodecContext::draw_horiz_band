<dec f='ffmpeg/libavcodec/avcodec.h' l='1937' type='void (*)(struct AVCodecContext *, const AVFrame *, int *, int, int, int)'/>
<offset>1472</offset>
<doc f='ffmpeg/libavcodec/avcodec.h' l='1914'>/**
     * If non NULL, &apos;draw_horiz_band&apos; is called by the libavcodec
     * decoder to draw a horizontal band. It improves cache usage. Not
     * all codecs can do that. You must check the codec capabilities
     * beforehand.
     * When multithreading is used, it may be called from multiple threads
     * at the same time; threads might draw different parts of the same AVFrame,
     * or multiple AVFrames, and there is no guarantee that slices will be drawn
     * in order.
     * The function is also used by hardware acceleration APIs.
     * It is called at least once during frame decoding to pass
     * the data needed for hardware render.
     * In that mode instead of pixel data, AVFrame points to
     * a structure specific to the acceleration API. The application
     * reads the structure and can change some fields to indicate progress
     * or mark state.
     * - encoding: unused
     * - decoding: Set by user.
     * @param height the height of the slice
     * @param y the y position of the slice
     * @param type 1-&gt;top field, 2-&gt;bottom field, 3-&gt;frame
     * @param offset offset into the AVFrame.data from which the slice should be read
     */</doc>
<use f='ffmpeg/libavcodec/h264dec.c' l='122' u='r' c='ff_h264_draw_horiz_band'/>
<use f='ffmpeg/libavcodec/h264dec.c' l='134' u='r' c='ff_h264_draw_horiz_band'/>
<use f='ffmpeg/libavcodec/huffyuvdec.c' l='855' u='r' c='draw_slice'/>
<use f='ffmpeg/libavcodec/huffyuvdec.c' l='873' u='r' c='draw_slice'/>
<use f='ffmpeg/libavcodec/mpegutils.c' l='49' u='r' c='ff_draw_horiz_band'/>
<use f='ffmpeg/libavcodec/mpegutils.c' l='77' u='r' c='ff_draw_horiz_band'/>
<use f='ffmpeg/libavcodec/mpegvideo.c' l='2521' u='r' c='mpv_decode_mb_internal'/>
<use f='ffmpeg/libavcodec/mpegvideo.c' l='2756' u='r' c='ff_init_block_index'/>
<use f='ffmpeg/libavcodec/pthread_frame.c' l='258' u='w' c='update_context_from_user'/>
<use f='ffmpeg/libavcodec/pthread_frame.c' l='258' u='r' c='update_context_from_user'/>
<use f='ffmpeg/libavcodec/vp3.c' l='1435' u='r' c='vp3_draw_horiz_band'/>
<use f='ffmpeg/libavcodec/vp3.c' l='1453' u='r' c='vp3_draw_horiz_band'/>
<dec f='include/libavcodec/avcodec.h' l='1567' type='void (*)(struct AVCodecContext *, const AVFrame *, int *, int, int, int)'/>
<offset>1408</offset>
<doc f='include/libavcodec/avcodec.h' l='1544'>/**
     * If non NULL, &apos;draw_horiz_band&apos; is called by the libavcodec
     * decoder to draw a horizontal band. It improves cache usage. Not
     * all codecs can do that. You must check the codec capabilities
     * beforehand.
     * When multithreading is used, it may be called from multiple threads
     * at the same time; threads might draw different parts of the same AVFrame,
     * or multiple AVFrames, and there is no guarantee that slices will be drawn
     * in order.
     * The function is also used by hardware acceleration APIs.
     * It is called at least once during frame decoding to pass
     * the data needed for hardware render.
     * In that mode instead of pixel data, AVFrame points to
     * a structure specific to the acceleration API. The application
     * reads the structure and can change some fields to indicate progress
     * or mark state.
     * - encoding: unused
     * - decoding: Set by user.
     * @param height the height of the slice
     * @param y the y position of the slice
     * @param type 1-&gt;top field, 2-&gt;bottom field, 3-&gt;frame
     * @param offset offset into the AVFrame.data from which the slice should be read
     */</doc>
<use f='vlc/modules/codec/avcodec/video.c' l='1247' u='w' c='ffmpeg_GetFrameBuf'/>
<use f='vlc/modules/codec/avcodec/video.c' l='1351' u='w' c='ffmpeg_GetFormat'/>
