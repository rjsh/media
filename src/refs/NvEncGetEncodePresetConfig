<dec f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='2078' type='NVENCSTATUS NvEncGetEncodePresetConfig(void * encoder, GUID encodeGUID, GUID presetGUID, NV_ENC_PRESET_CONFIG * presetConfig)'/>
<doc f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='2043'>/**
 * \brief Returns a preset config structure supported for given preset GUID.
 *
 * The function returns a preset config structure for a given preset guid. Before
 * using this function the client must enumerate the preset guids available for
 * a given codec. The preset config structure can be modified by the client depending
 * upon its use case and can be then used to initialize the encoder using
 * ::NvEncInitializeEncoder() API. The client can use this function only if it
 * wants to modify the NvEncodeAPI preset configuration, otherwise it can
 * directly use the preset guid.
 *
 * \param [in] encoder
 *   Pointer to the NvEncodeAPI interface.
 * \param [in] encodeGUID
 *   Encode GUID, corresponding to which the list of supported presets is to be
 *   retrieved.
 * \param [in] presetGUID
 *   Preset GUID, corresponding to which the Encoding configurations is to be
 *   retrieved.
 * \param [out] presetConfig
 *   The requested Preset Encoder Attribute set. Refer ::_NV_ENC_CONFIG for
*    more details.
 *
 * \return
 * ::NV_ENC_SUCCESS \n
 * ::NV_ENC_ERR_INVALID_PTR \n
 * ::NV_ENC_ERR_INVALID_ENCODERDEVICE \n
 * ::NV_ENC_ERR_DEVICE_NOT_EXIST \n
 * ::NV_ENC_ERR_UNSUPPORTED_PARAM \n
 * ::NV_ENC_ERR_OUT_OF_MEMORY \n
 * ::NV_ENC_ERR_INVALID_PARAM \n
 * ::NV_ENC_ERR_INVALID_VERSION \n
 * ::NV_ENC_ERR_GENERIC \n
 *
 */</doc>
