<def f='MediaInfoLib/ThirdParty/tinyxml2/tinyxml2.h' l='1762'/>
<size>8</size>
<doc f='MediaInfoLib/ThirdParty/tinyxml2/tinyxml2.h' l='1707'>/**
	A XMLHandle is a class that wraps a node pointer with null checks; this is
	an incredibly useful thing. Note that XMLHandle is not part of the TinyXML-2
	DOM structure. It is a separate utility class.

	Take an example:
	@verbatim
	&lt;Document&gt;
		&lt;Element attributeA = &quot;valueA&quot;&gt;
			&lt;Child attributeB = &quot;value1&quot; /&gt;
			&lt;Child attributeB = &quot;value2&quot; /&gt;
		&lt;/Element&gt;
	&lt;/Document&gt;
	@endverbatim

	Assuming you want the value of &quot;attributeB&quot; in the 2nd &quot;Child&quot; element, it&apos;s very
	easy to write a *lot* of code that looks like:

	@verbatim
	XMLElement* root = document.FirstChildElement( &quot;Document&quot; );
	if ( root )
	{
		XMLElement* element = root-&gt;FirstChildElement( &quot;Element&quot; );
		if ( element )
		{
			XMLElement* child = element-&gt;FirstChildElement( &quot;Child&quot; );
			if ( child )
			{
				XMLElement* child2 = child-&gt;NextSiblingElement( &quot;Child&quot; );
				if ( child2 )
				{
					// Finally do something useful.
	@endverbatim

	And that doesn&apos;t even cover &quot;else&quot; cases. XMLHandle addresses the verbosity
	of such code. A XMLHandle checks for null pointers so it is perfectly safe
	and correct to use:

	@verbatim
	XMLHandle docHandle( &amp;document );
	XMLElement* child2 = docHandle.FirstChild( &quot;Document&quot; ).FirstChild( &quot;Element&quot; ).FirstChild().NextSibling().ToElement();
	if ( child2 )
	{
		// do something useful
	@endverbatim

	Which is MUCH more concise and useful.

	It is also safe to copy handles - internally they are nothing more than node pointers.
	@verbatim
	XMLHandle handleCopy = handle;
	@endverbatim

	See also XMLConstHandle, which is the same as XMLHandle, but operates on const objects.
*/</doc>
<fun r='_ZN8tinyxml29XMLHandleC1EPNS_7XMLNodeE'/>
<fun r='_ZN8tinyxml29XMLHandleC1ERNS_7XMLNodeE'/>
<fun r='_ZN8tinyxml29XMLHandleC1ERKS0_'/>
<fun r='_ZN8tinyxml29XMLHandleaSERKS0_'/>
<fun r='_ZN8tinyxml29XMLHandle10FirstChildEv'/>
<fun r='_ZN8tinyxml29XMLHandle17FirstChildElementEPKc'/>
<fun r='_ZN8tinyxml29XMLHandle9LastChildEv'/>
<fun r='_ZN8tinyxml29XMLHandle16LastChildElementEPKc'/>
<fun r='_ZN8tinyxml29XMLHandle15PreviousSiblingEv'/>
<fun r='_ZN8tinyxml29XMLHandle22PreviousSiblingElementEPKc'/>
<fun r='_ZN8tinyxml29XMLHandle11NextSiblingEv'/>
<fun r='_ZN8tinyxml29XMLHandle18NextSiblingElementEPKc'/>
<fun r='_ZN8tinyxml29XMLHandle6ToNodeEv'/>
<fun r='_ZN8tinyxml29XMLHandle9ToElementEv'/>
<fun r='_ZN8tinyxml29XMLHandle6ToTextEv'/>
<fun r='_ZN8tinyxml29XMLHandle9ToUnknownEv'/>
<fun r='_ZN8tinyxml29XMLHandle13ToDeclarationEv'/>
<mbr r='tinyxml2::XMLHandle::_node' o='0' t='tinyxml2::XMLNode *'/>
