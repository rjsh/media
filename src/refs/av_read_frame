<dec f='ffmpeg/libavformat/avformat.h' l='2288' type='int av_read_frame(AVFormatContext * s, AVPacket * pkt)'/>
<doc f='ffmpeg/libavformat/avformat.h' l='2264'>/**
 * Return the next frame of a stream.
 * This function returns what is stored in the file, and does not validate
 * that what is there are valid frames for the decoder. It will split what is
 * stored in the file into frames and return one for each call. It will not
 * omit invalid data between valid frames so as to give the decoder the maximum
 * information possible for decoding.
 *
 * If pkt-&gt;buf is NULL, then the packet is valid until the next
 * av_read_frame() or until avformat_close_input(). Otherwise the packet
 * is valid indefinitely. In both cases the packet must be freed with
 * av_packet_unref when it is no longer needed. For video, the packet contains
 * exactly one frame. For audio, it contains an integer number of frames if each
 * frame has a known fixed size (e.g. PCM or ADPCM data). If the audio frames
 * have a variable size (e.g. MPEG audio), then it contains one frame.
 *
 * pkt-&gt;pts, pkt-&gt;dts and pkt-&gt;duration are always set to correct
 * values in AVStream.time_base units (and guessed if the format cannot
 * provide them). pkt-&gt;pts can be AV_NOPTS_VALUE if the video format
 * has B-frames, so it is better to rely on pkt-&gt;dts if you do not
 * decompress the payload.
 *
 * @return 0 if OK, &lt; 0 on error or end of file
 */</doc>
<use f='ffmpeg/libavfilter/lavfutils.c' l='73' u='c' c='ff_load_image'/>
<use f='ffmpeg/libavfilter/src_movie.c' l='492' u='c' c='movie_push_frame'/>
<use f='ffmpeg/ffmpeg.c' l='3793' u='c' c='input_thread'/>
<use f='ffmpeg/ffmpeg.c' l='3898' u='c' c='get_input_packet'/>
<use f='ffmpeg/ffprobe.c' l='2082' u='c' c='read_interval_packets'/>
<use f='ffmpeg/ffserver.c' l='2339' u='c' c='http_prepare_data'/>
<use f='ffmpeg/ffserver.c' l='3629' u='c' c='extract_mpeg4_header'/>
<use f='ffmpeg/libavfilter/vf_subtitles.c' l='449' u='c' c='init_subtitles'/>
<use f='ffmpeg/libavformat/asfdec_f.c' l='1534' u='c' c='asf_read_pts'/>
<use f='ffmpeg/libavformat/concatdec.c' l='602' u='c' c='concat_read_packet'/>
<use f='ffmpeg/libavformat/hls.c' l='1885' u='c' c='hls_read_packet'/>
<use f='ffmpeg/libavformat/mpc.c' l='215' u='c' c='mpc_read_seek'/>
<use f='ffmpeg/libavformat/mpegts.c' l='2853' u='c' c='mpegts_get_dts'/>
<use f='ffmpeg/libavformat/sapdec.c' l='216' u='c' c='sap_fetch_packet'/>
<def f='ffmpeg/libavformat/utils.c' l='1676' type='int av_read_frame(AVFormatContext * s, AVPacket * pkt)'/>
<use f='ffmpeg/libavformat/utils.c' l='2334' u='c' c='seek_frame_generic'/>
<dec f='include/libavformat/avformat.h' l='1332' type='int av_read_frame(AVFormatContext * s, AVPacket * pkt)'/>
<doc f='include/libavformat/avformat.h' l='1308'>/**
 * Return the next frame of a stream.
 * This function returns what is stored in the file, and does not validate
 * that what is there are valid frames for the decoder. It will split what is
 * stored in the file into frames and return one for each call. It will not
 * omit invalid data between valid frames so as to give the decoder the maximum
 * information possible for decoding.
 *
 * If pkt-&gt;destruct is NULL, then the packet is valid until the next
 * av_read_frame() or until av_close_input_file(). Otherwise the packet is valid
 * indefinitely. In both cases the packet must be freed with
 * av_free_packet when it is no longer needed. For video, the packet contains
 * exactly one frame. For audio, it contains an integer number of frames if each
 * frame has a known fixed size (e.g. PCM or ADPCM data). If the audio frames
 * have a variable size (e.g. MPEG audio), then it contains one frame.
 *
 * pkt-&gt;pts, pkt-&gt;dts and pkt-&gt;duration are always set to correct
 * values in AVStream.time_base units (and guessed if the format cannot
 * provide them). pkt-&gt;pts can be AV_NOPTS_VALUE if the video format
 * has B-frames, so it is better to rely on pkt-&gt;dts if you do not
 * decompress the payload.
 *
 * @return 0 if OK, &lt; 0 on error or end of file
 */</doc>
<use f='vlc/modules/demux/avformat/demux.c' l='679' u='c' c='Demux'/>
