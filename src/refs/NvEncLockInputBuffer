<dec f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='2570' type='NVENCSTATUS NvEncLockInputBuffer(void * encoder, NV_ENC_LOCK_INPUT_BUFFER * lockInputBufferParams)'/>
<doc f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='2540'>/**
 * \brief Locks an input buffer
 *
 * This function is used to lock the input buffer to load the uncompressed YUV
 * pixel data into input buffer memory. The client must pass the NV_ENC_INPUT_PTR
 * it had previously allocated using ::NvEncCreateInputBuffer()in the
 * NV_ENC_LOCK_INPUT_BUFFER::inputBuffer field.
 * The NvEncodeAPI interface returns pointer to client accessible input buffer
 * memory in NV_ENC_LOCK_INPUT_BUFFER::bufferDataPtr field.
 *
 * \param [in] encoder
 *   Pointer to the NvEncodeAPI interface.
 * \param [in,out] lockInputBufferParams
 *   Pointer to the ::_NV_ENC_LOCK_INPUT_BUFFER structure
 *
 * \return
 * \return
 * ::NV_ENC_SUCCESS \n
 * ::NV_ENC_ERR_INVALID_PTR \n
 * ::NV_ENC_ERR_INVALID_ENCODERDEVICE \n
 * ::NV_ENC_ERR_DEVICE_NOT_EXIST \n
 * ::NV_ENC_ERR_UNSUPPORTED_PARAM \n
 * ::NV_ENC_ERR_OUT_OF_MEMORY \n
 * ::NV_ENC_ERR_INVALID_PARAM \n
 * ::NV_ENC_ERR_INVALID_VERSION \n
 * ::NV_ENC_ERR_LOCK_BUSY \n
 * ::NV_ENC_ERR_ENCODER_NOT_INITIALIZED \n
 * ::NV_ENC_ERR_GENERIC \n
 *
 */</doc>
