<def f='ffmpeg/libavutil/ffmath.h' l='42' type='double ff_exp10(double x)'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='320' u='c' c='butterworth_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='321' u='c' c='butterworth_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='322' u='c' c='butterworth_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='389' u='c' c='chebyshev1_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='390' u='c' c='chebyshev1_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='391' u='c' c='chebyshev1_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='462' u='c' c='chebyshev2_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='463' u='c' c='chebyshev2_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='464' u='c' c='chebyshev2_bp_filter'/>
<doc f='ffmpeg/libavutil/ffmath.h' l='32'>/**
 * Compute 10^x for floating point values. Note: this function is by no means
 * &quot;correctly rounded&quot;, and is meant as a fast, reasonably accurate approximation.
 * For instance, maximum relative error for the double precision variant is
 * ~ 1e-13 for very small and very large values.
 * This is ~2x faster than GNU libm&apos;s approach, which is still off by 2ulp on
 * some inputs.
 * @param x exponent
 * @return 10^x
 */</doc>
<use f='ffmpeg/libavfilter/af_compand.c' l='510' u='c' c='config_output'/>
<use f='ffmpeg/libavfilter/af_volume.c' l='380' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/f_ebur128.c' l='439' u='c' c='get_histogram'/>
<use f='ffmpeg/libavfilter/vaf_spectrumsynth.c' l='258' u='c' c='read16_fft_bin'/>
<use f='ffmpeg/libavfilter/vaf_spectrumsynth.c' l='283' u='c' c='read8_fft_bin'/>
<use f='ffmpeg/libavcodec/aacpsy.c' l='352' u='c' c='psy_3gpp_init'/>
<use f='ffmpeg/libavcodec/aacpsy.c' l='353' u='c' c='psy_3gpp_init'/>
<use f='ffmpeg/libavcodec/aacpsy.c' l='354' u='c' c='psy_3gpp_init'/>
<use f='ffmpeg/libavcodec/aacpsy.c' l='355' u='c' c='psy_3gpp_init'/>
<use f='ffmpeg/libavcodec/acelp_pitch_delay.c' l='135' u='c' c='ff_amr_set_fixed_gain'/>
<use f='ffmpeg/libavcodec/cngdec.c' l='116' u='c' c='cng_decode_frame'/>
<use f='ffmpeg/libavcodec/dcaenc.c' l='182' u='c' c='encode_init'/>
<use f='ffmpeg/libavcodec/dcaenc.c' l='208' u='c' c='encode_init'/>
<use f='ffmpeg/libavcodec/imc.c' l='139' u='c' c='iac_generate_tabs'/>
<use f='ffmpeg/libavcodec/imc.c' l='140' u='c' c='iac_generate_tabs'/>
<use f='ffmpeg/libavcodec/on2avc.c' l='931' u='c' c='on2avc_decode_init'/>
<use f='ffmpeg/libavcodec/on2avc.c' l='933' u='c' c='on2avc_decode_init'/>
<use f='ffmpeg/libavcodec/opus.c' l='337' u='c' c='ff_opus_parse_extradata'/>
<use f='ffmpeg/libavcodec/wmadec.c' l='630' u='c' c='wma_decode_block'/>
<use f='ffmpeg/libavcodec/wmadec.c' l='678' u='c' c='wma_decode_block'/>
<use f='ffmpeg/libavcodec/wmaenc.c' l='144' u='c' c='init_exp'/>
<use f='ffmpeg/libavcodec/wmaenc.c' l='239' u='c' c='encode_block'/>
<use f='ffmpeg/libavcodec/wmaprodec.c' l='1354' u='c' c='decode_subframe'/>
<use f='ffmpeg/libavfilter/vsrc_testsrc.c' l='619' u='c' c='test_fill_picture'/>
<use f='ffmpeg/libavutil/eval.c' l='110' u='c' c='av_strtod'/>
