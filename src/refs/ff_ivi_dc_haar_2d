<dec f='ffmpeg/libavcodec/ivi_dsp.h' l='148' type='void ff_ivi_dc_haar_2d(const int32_t * in, int16_t * out, uint32_t pitch, int blk_size)'/>
<use f='ffmpeg/libavcodec/indeo4.c' l='46'/>
<use f='ffmpeg/libavcodec/indeo4.c' l='47'/>
<use f='ffmpeg/libavcodec/indeo4.c' l='48'/>
<use f='ffmpeg/libavcodec/indeo4.c' l='56'/>
<use f='ffmpeg/libavcodec/indeo4.c' l='59'/>
<use f='ffmpeg/libavcodec/indeo4.c' l='60'/>
<doc f='ffmpeg/libavcodec/ivi_dsp.h' l='138'>/**
 *  DC-only two-dimensional inverse Haar transform for Indeo 4.
 *  Performing the inverse transform in this case is equivalent to
 *  spreading DC_coeff &gt;&gt; 3 over the whole block.
 *
 *  @param[in]  in          pointer to the dc coefficient
 *  @param[out] out         pointer to the output buffer (frame)
 *  @param[in]  pitch       pitch to move to the next y line
 *  @param[in]  blk_size    transform block size
 */</doc>
<def f='ffmpeg/libavcodec/ivi_dsp.c' l='472' type='void ff_ivi_dc_haar_2d(const int32_t * in, int16_t * out, uint32_t pitch, int blk_size)'/>
