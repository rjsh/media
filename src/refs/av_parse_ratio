<dec f='ffmpeg/libavutil/parseutils.h' l='49' type='int av_parse_ratio(AVRational * q, const char * str, int max, int log_offset, void * log_ctx)'/>
<doc f='ffmpeg/libavutil/parseutils.h' l='31'>/**
 * Parse str and store the parsed ratio in q.
 *
 * Note that a ratio with infinite (1/0) or negative value is
 * considered valid, so you should check on the returned value if you
 * want to exclude those values.
 *
 * The undefined value can be expressed using the &quot;0:0&quot; string.
 *
 * @param[in,out] q pointer to the AVRational which will contain the ratio
 * @param[in] str the string to parse: it has to be a string in the format
 * num:den, a float number or an expression
 * @param[in] max the maximum allowed numerator and denominator
 * @param[in] log_offset log level offset which is applied to the log
 * level of log_ctx
 * @param[in] log_ctx parent logging context
 * @return &gt;= 0 on success, a negative error code otherwise
 */</doc>
<use f='ffmpeg/libavfilter/formats.c' l='642' u='c' c='ff_parse_time_base'/>
<use f='ffmpeg/libavfilter/vf_aspect.c' l='135' u='c' c='get_aspect_ratio'/>
<use f='ffmpeg/ffmpeg_opt.c' l='1530' u='c' c='new_video_stream'/>
<use f='ffmpeg/libavformat/vivo.c' l='210' u='c' c='vivo_read_header'/>
<def f='ffmpeg/libavutil/parseutils.c' l='45' type='int av_parse_ratio(AVRational * q, const char * str, int max, int log_offset, void * log_ctx)'/>
<use f='ffmpeg/libavutil/parseutils.c' l='187' macro='1' u='c'/>
