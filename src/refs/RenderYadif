<dec f='vlc/modules/video_filter/deinterlace/algo_yadif.h' l='86' type='int RenderYadif(filter_t * p_filter, picture_t * p_dst, picture_t * p_src, int i_order, int i_field)'/>
<doc f='vlc/modules/video_filter/deinterlace/algo_yadif.h' l='42'>/**
 * Yadif (Yet Another DeInterlacing Filter) from FFmpeg.
 * One field is copied as-is (i_field), the other is interpolated.
 *
 * Comes with both interpolating and framerate doubling modes.
 *
 * If you do NOT want to use framerate doubling: use i_order = 0,
 * and either 0 or 1 for i_field (keep it constant),
 *
 * If you DO want framerate doubling, do as instructed below.
 *
 * See Deinterlace() for usage examples of both modes.
 *
 * Needs three frames in the history buffer to operate.
 * The first-ever frame is rendered using RenderX().
 * The second is dropped. At the third frame, Yadif starts.
 *
 * Once Yadif starts, the frame that is rendered corresponds to the *previous*
 * input frame (i_frame_offset = 1), complete with its original PTS.
 * The latest input frame is used as the future/next frame, as reference
 * for temporal interpolation.
 *
 * This wrapper adds support for soft field repeat (repeat_pict).
 * Note that the generated &quot;repeated&quot; output picture is unique because
 * of temporal interpolation.
 *
 * As many output frames should be requested for each input frame as is
 * indicated by p_src-&gt;i_nb_fields. This is done by calling this function
 * several times, first with i_order = 0, and then with all other parameters
 * the same, but a new p_dst, increasing i_order (1 for second field,
 * and then if i_nb_fields = 3, also i_order = 2 to get the repeated first
 * field), and alternating i_field (starting, at i_order = 0, with the field
 * according to p_src-&gt;b_top_field_first). See Deinterlace() for an example.
 *
 * @param p_filter The filter instance. Must be non-NULL.
 * @param p_dst Output frame. Must be allocated by caller.
 * @param p_src Input frame. Must exist.
 * @param i_order Temporal field number: 0 = first, 1 = second, 2 = rep. first.
 * @param i_field Keep which field? 0 = top field, 1 = bottom field.
 * @return VLC error code (int).
 * @retval VLC_SUCCESS The requested field was rendered into p_dst.
 * @retval VLC_EGENERIC Frame dropped; only occurs at the second frame after start.
 * @see Deinterlace()
 */</doc>
<def f='vlc/modules/video_filter/deinterlace/algo_yadif.c' l='50' type='int RenderYadif(filter_t * p_filter, picture_t * p_dst, picture_t * p_src, int i_order, int i_field)'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='476' u='c' c='Deinterlace'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='481' u='c' c='Deinterlace'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='484' u='c' c='Deinterlace'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='486' u='c' c='Deinterlace'/>
