<dec f='vlc/include/vlc_modules.h' l='36' type='module_t * vlc_module_load(vlc_object_t * obj, const char * cap, const char * name, _Bool strict, vlc_activate_t probe)'/>
<use f='vlc/modules/codec/avcodec/va.c' l='56' macro='1' u='c'/>
<def f='vlc/src/modules/modules.c' l='212' type='module_t * vlc_module_load(vlc_object_t * obj, const char * capability, const char * name, _Bool strict, vlc_activate_t probe)'/>
<use f='vlc/src/modules/modules.c' l='366' u='c' c='module_need'/>
<doc f='vlc/src/modules/modules.c' l='192'>/**
 * Finds and instantiates the best module of a certain type.
 * All candidates modules having the specified capability and name will be
 * sorted in decreasing order of priority. Then the probe callback will be
 * invoked for each module, until it succeeds (returns 0), or all candidate
 * module failed to initialize.
 *
 * The probe callback first parameter is the address of the module entry point.
 * Further parameters are passed as an argument list; it corresponds to the
 * variable arguments passed to this function. This scheme is meant to
 * support arbitrary prototypes for the module entry point.
 *
 * \param obj VLC object
 * \param capability capability, i.e. class of module
 * \param name name name of the module asked, if any
 * \param strict if true, do not fallback to plugin with a different name
 *                 but the same capability
 * \param probe module probe callback
 * \return the module or NULL in case of a failure
 */</doc>
<use f='vlc/src/network/tls.c' l='94' macro='1' u='c'/>
<use f='vlc/src/network/tls.c' l='119' macro='1' u='c'/>
<use f='vlc/src/video_output/window.c' l='93' macro='1' u='c'/>
