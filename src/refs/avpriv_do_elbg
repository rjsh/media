<dec f='ffmpeg/libavcodec/elbg.h' l='41' type='int avpriv_do_elbg(int * points, int dim, int numpoints, int * codebook, int numCB, int num_steps, int * closest_cb, AVLFG * rand_state)'/>
<use f='ffmpeg/libavcodec/a64multienc.c' l='340' u='c' c='a64multi_encode_frame'/>
<doc f='ffmpeg/libavcodec/elbg.h' l='26'>/**
 * Implementation of the Enhanced LBG Algorithm
 * Based on the paper &quot;Neural Networks 14:1219-1237&quot; that can be found in
 * http://citeseer.ist.psu.edu/patan01enhanced.html .
 *
 * @param points Input points.
 * @param dim Dimension of the points.
 * @param numpoints Num of points in **points.
 * @param codebook Pointer to the output codebook. Must be allocated.
 * @param numCB Number of points in the codebook.
 * @param num_steps The maximum number of steps. One step is already a good compromise between time and quality.
 * @param closest_cb Return the closest codebook to each point. Must be allocated.
 * @param rand_state A random number generator state. Should be already initialized by av_lfg_init().
 * @return &lt; 0 in case of error, 0 otherwise
 */</doc>
<use f='ffmpeg/libavcodec/cinepakenc.c' l='876' u='c' c='quantize'/>
<use f='ffmpeg/libavcodec/elbg.c' l='360' u='c' c='avpriv_init_elbg'/>
<def f='ffmpeg/libavcodec/elbg.c' l='371' type='int avpriv_do_elbg(int * points, int dim, int numpoints, int * codebook, int numCB, int max_steps, int * closest_cb, AVLFG * rand_state)'/>
<use f='ffmpeg/libavcodec/msvideo1enc.c' l='120' u='c' c='encode_frame'/>
<use f='ffmpeg/libavcodec/msvideo1enc.c' l='140' u='c' c='encode_frame'/>
<use f='ffmpeg/libavcodec/msvideo1enc.c' l='166' u='c' c='encode_frame'/>
<use f='ffmpeg/libavcodec/roqvideoenc.c' l='821' u='c' c='generate_codebook'/>
<use f='ffmpeg/libavfilter/vf_elbg.c' l='172' u='c' c='filter_frame'/>
