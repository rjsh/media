<dec f='vlc/modules/hw/vdpau/vlc_vdpau.h' l='188' type='VdpStatus vdp_get_x11(const char * name, int num, vdp_t ** vdp, VdpDevice * dev)'/>
<doc f='vlc/modules/hw/vdpau/vlc_vdpau.h' l='174'>/**
 * Finds an existing pair of VDPAU instance and VDPAU device matching the
 * specified X11 display and screen number from within the process-wide list.
 * If no existing instance corresponds, connect to the X11 server,
 * create a new pair of instance and device, and set the reference count to 1.
 * @param name X11 display name
 * @param snum X11 screen number
 * @param vdp memory location to hold the VDPAU instance pointer [OUT]
 * @param dev memory location to hold the VDPAU device handle [OUT]
 * @return VDP_STATUS_OK on success, otherwise a VDPAU error code.
 *
 * @note Use vdp_release_x11() to release the instance. &lt;b&gt;Do not use&lt;/b&gt;
 * vdp_device_destroy() and/or vdp_destroy_x11() with vdp_get_x11().
 */</doc>
<use f='vlc/modules/hw/vdpau/display.c' l='456' u='c' c='Open'/>
<def f='vlc/modules/hw/vdpau/instance.c' l='145' type='VdpStatus vdp_get_x11(const char * display_name, int snum, vdp_t **restrict vdpp, VdpDevice *restrict devicep)'/>
<doc f='vlc/modules/hw/vdpau/instance.c' l='140'>/** Finds an existing VDPAU instance for the given X11 display and screen.
 * If not found, (try to) create a new one.
 * @param display_name X11 display string, NULL for default
 * @param snum X11 screen number, strictly negative for default
 **/</doc>
<use f='vlc/modules/hw/vdpau/sharpen.c' l='97' u='c' c='Open'/>
