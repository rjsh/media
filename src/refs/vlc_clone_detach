<dec f='vlc/src/libvlc.h' l='58' type='int vlc_clone_detach(vlc_thread_t * , void *(*)(void *) , void * , int )'/>
<doc f='vlc/src/libvlc.h' l='57'>/* This cannot be used as is from plugins yet: */</doc>
<use f='vlc/src/playlist/fetcher.c' l='138' u='c' c='playlist_fetcher_Push'/>
<use f='vlc/src/playlist/preparser.c' l='85' u='c' c='playlist_preparser_Push'/>
<def f='vlc/src/posix/thread.c' l='728' type='int vlc_clone_detach(vlc_thread_t * th, void *(*)(void *) entry, void * data, int priority)'/>
<doc f='vlc/src/posix/thread.c' l='698'>/**
 * Creates and starts new detached thread.
 * A detached thread cannot be joined. Its resources will be automatically
 * released whenever the thread exits (in particular, its call stack will be
 * reclaimed).
 *
 * Detached thread are particularly useful when some work needs to be done
 * asynchronously, that is likely to be completed much earlier than the thread
 * can practically be joined. In this case, thread detach can spare memory.
 *
 * A detached thread may be cancelled, so as to expedite its termination.
 * Be extremely careful if you do this: while a normal joinable thread can
 * safely be cancelled after it has already exited, cancelling an already
 * exited detached thread is undefined: The thread handle would is destroyed
 * immediately when the detached thread exits. So you need to ensure that the
 * detached thread is still running before cancellation is attempted.
 *
 * @warning Care must be taken that any resources used by the detached thread
 * remains valid until the thread completes.
 *
 * @note A detached thread must eventually exit just like another other
 * thread. In practice, LibVLC will wait for detached threads to exit before
 * it unloads the plugins.
 *
 * @param th [OUT] pointer to hold the thread handle, or NULL
 * @param entry entry point for the thread
 * @param data data parameter given to the entry point
 * @param priority thread priority value
 * @return 0 on success, a standard error code on error.
 */</doc>
