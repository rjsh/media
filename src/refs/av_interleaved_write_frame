<dec f='ffmpeg/libavformat/avformat.h' l='2513' type='int av_interleaved_write_frame(AVFormatContext * s, AVPacket * pkt)'/>
<doc f='ffmpeg/libavformat/avformat.h' l='2470'>/**
 * Write a packet to an output media file ensuring correct interleaving.
 *
 * This function will buffer the packets internally as needed to make sure the
 * packets in the output file are properly interleaved in the order of
 * increasing dts. Callers doing their own interleaving should call
 * av_write_frame() instead of this function.
 *
 * Using this function instead of av_write_frame() can give muxers advance
 * knowledge of future packets, improving e.g. the behaviour of the mp4
 * muxer for VFR content in fragmenting mode.
 *
 * @param s media file handle
 * @param pkt The packet containing the data to be written.
 *            &lt;br&gt;
 *            If the packet is reference-counted, this function will take
 *            ownership of this reference and unreference it later when it sees
 *            fit.
 *            The caller must not access the data through this reference after
 *            this function returns. If the packet is not reference-counted,
 *            libavformat will make a copy.
 *            &lt;br&gt;
 *            This parameter can be NULL (at any time, not just at the end), to
 *            flush the interleaving queues.
 *            &lt;br&gt;
 *            Packet&apos;s @ref AVPacket.stream_index &quot;stream_index&quot; field must be
 *            set to the index of the corresponding stream in @ref
 *            AVFormatContext.streams &quot;s-&gt;streams&quot;.
 *            &lt;br&gt;
 *            The timestamps (@ref AVPacket.pts &quot;pts&quot;, @ref AVPacket.dts &quot;dts&quot;)
 *            must be set to correct values in the stream&apos;s timebase (unless the
 *            output format is flagged with the AVFMT_NOTIMESTAMPS flag, then
 *            they can be set to AV_NOPTS_VALUE).
 *            The dts for subsequent packets in one stream must be strictly
 *            increasing (unless the output format is flagged with the
 *            AVFMT_TS_NONSTRICT, then they merely have to be nondecreasing).
 *            @ref AVPacket.duration &quot;duration&quot;) should also be set if known.
 *
 * @return 0 on success, a negative AVERROR on error. Libavformat will always
 *         take care of freeing the packet, even if this function fails.
 *
 * @see av_write_frame(), AVFormatContext.max_interleave_delta
 */</doc>
<use f='ffmpeg/ffmpeg.c' l='764' u='c' c='write_packet'/>
<use f='ffmpeg/libavformat/img2enc.c' l='166' u='c' c='write_packet'/>
<def f='ffmpeg/libavformat/mux.c' l='1225' type='int av_interleaved_write_frame(AVFormatContext * s, AVPacket * pkt)'/>
<use f='ffmpeg/libavformat/mux.c' l='1379' u='c' c='ff_write_chained'/>
<use f='ffmpeg/libavformat/mux.c' l='1410' u='c' c='av_write_uncoded_frame_internal'/>
<use f='ffmpeg/libavformat/tee.c' l='467' u='c' c='tee_write_packet'/>
<use f='ffmpeg/libavformat/tee.c' l='510' u='c' c='tee_write_packet'/>
<dec f='include/libavformat/avformat.h' l='1479' type='int av_interleaved_write_frame(AVFormatContext * s, AVPacket * pkt)'/>
<doc f='include/libavformat/avformat.h' l='1453'>/**
 * Write a packet to an output media file ensuring correct interleaving.
 *
 * The packet must contain one audio or video frame.
 * If the packets are already correctly interleaved, the application should
 * call av_write_frame() instead as it is slightly faster. It is also important
 * to keep in mind that completely non-interleaved input will need huge amounts
 * of memory to interleave with this, so it is preferable to interleave at the
 * demuxer level.
 *
 * @param s media file handle
 * @param pkt The packet containing the data to be written. Libavformat takes
 * ownership of the data and will free it when it sees fit using the packet&apos;s
 * @ref AVPacket.destruct &quot;destruct&quot; field. The caller must not access the data
 * after this function returns, as it may already be freed.
 * This can be NULL (at any time, not just at the end), to flush the
 * interleaving queues.
 * Packet&apos;s @ref AVPacket.stream_index &quot;stream_index&quot; field must be set to the
 * index of the corresponding stream in @ref AVFormatContext.streams
 * &quot;s.streams&quot;.
 * It is very strongly recommended that timing information (@ref AVPacket.pts
 * &quot;pts&quot;, @ref AVPacket.dts &quot;dts&quot; @ref AVPacket.duration &quot;duration&quot;) is set to
 * correct values.
 *
 * @return 0 on success, a negative AVERROR on error.
 */</doc>
