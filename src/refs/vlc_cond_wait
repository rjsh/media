<dec f='vlc/include/vlc_threads.h' l='238' type='void vlc_cond_wait(vlc_cond_t * , vlc_mutex_t * )'/>
<use f='vlc/lib/event_async.c' l='225' u='c' c='libvlc_event_async_ensure_listener_removal'/>
<use f='vlc/lib/event_async.c' l='279' u='c' c='event_async_loop'/>
<use f='vlc/lib/media.c' l='659' u='c' c='libvlc_media_parse'/>
<use f='vlc/modules/demux/mkv/demux.cpp' l='158' u='c' c='_ZN14event_thread_t11EventThreadEv'/>
<use f='vlc/modules/gui/skins2/commands/cmd_callbacks.hpp' l='107' u='c' c='_ZN15CmdExecuteBlock11executeWaitERK10CountedPtrI10CmdGenericE'/>
<use f='vlc/modules/gui/skins2/src/skin_main.cpp' l='121' u='c' c='_ZL4OpenP12vlc_object_t'/>
<use f='vlc/modules/lua/extension_thread.c' l='331' u='c' c='Run'/>
<use f='vlc/modules/lua/libs/dialog.c' l='261' u='c' c='vlclua_dialog_delete'/>
<use f='vlc/modules/lua/libs/dialog.c' l='1015' u='c' c='vlclua_dialog_delete_widget'/>
<use f='vlc/modules/lua/services_discovery.c' l='215' u='c' c='Run'/>
<use f='vlc/modules/misc/audioscrobbler.c' l='704' u='c' c='Run'/>
<use f='vlc/modules/misc/fingerprinter.c' l='215' u='c' c='DoFingerprint'/>
<use f='vlc/modules/services_discovery/podcast.c' l='217' u='c' c='Run'/>
<use f='vlc/modules/stream_filter/dash/buffer/BlockBuffer.cpp' l='66' u='c' c='_ZN4dash6buffer11BlockBuffer4peekEPPKhj'/>
<use f='vlc/modules/stream_filter/dash/buffer/BlockBuffer.cpp' l='107' u='c' c='_ZN4dash6buffer11BlockBuffer3getEPvj'/>
<use f='vlc/modules/stream_filter/dash/buffer/BlockBuffer.cpp' l='137' u='c' c='_ZN4dash6buffer11BlockBuffer3putEP7block_t'/>
<use f='vlc/modules/stream_filter/decomp.c' l='134' u='c' c='Thread'/>
<use f='vlc/modules/stream_filter/httplive.c' l='1660' u='c' c='hls_Thread'/>
<use f='vlc/modules/stream_filter/httplive.c' l='1833' u='c' c='hls_Download'/>
<use f='vlc/modules/stream_filter/httplive.c' l='2640' u='c' c='segment_Seek'/>
<use f='vlc/modules/stream_filter/smooth/downloader.c' l='632' u='c' c='sms_Thread'/>
<use f='vlc/modules/stream_out/transcode/video.c' l='114' u='c' c='EncoderThread'/>
<use f='vlc/src/input/decoder.c' l='565' u='c' c='input_DecoderWait'/>
<use f='vlc/src/input/decoder.c' l='952' u='c' c='DecoderFlush'/>
<use f='vlc/src/input/decoder.c' l='1010' u='c' c='DecoderWaitUnblock'/>
<use f='vlc/src/input/es_out_timeshift.c' l='962' u='c' c='TsRun'/>
<use f='vlc/src/input/vlm.c' l='412' u='c' c='Manage'/>
<use f='vlc/src/misc/addons.c' l='333' u='c' c='FinderThread'/>
<use f='vlc/src/misc/addons.c' l='448' u='c' c='InstallerThread'/>
<use f='vlc/src/misc/block.c' l='601' u='c' c='block_FifoPace'/>
<use f='vlc/src/misc/block.c' l='667' u='c' c='block_FifoGet'/>
<use f='vlc/src/misc/block.c' l='718' u='c' c='block_FifoShow'/>
<use f='vlc/src/misc/variables.c' l='1112' u='c' c='WaitUnused'/>
<use f='vlc/src/network/httpd.c' l='1758' u='c' c='httpdLoop'/>
<use f='vlc/src/playlist/fetcher.c' l='166' u='c' c='playlist_fetcher_Delete'/>
<use f='vlc/src/playlist/preparser.c' l='112' u='c' c='playlist_preparser_Delete'/>
<use f='vlc/src/playlist/thread.c' l='467' u='c' c='LoopInput'/>
<use f='vlc/src/playlist/thread.c' l='484' u='c' c='LoopRequest'/>
<def f='vlc/src/posix/thread.c' l='385' type='void vlc_cond_wait(vlc_cond_t * p_condvar, vlc_mutex_t * p_mutex)'/>
<doc f='vlc/src/posix/thread.c' l='353'>/**
 * Waits for a condition variable. The calling thread will be suspended until
 * another thread calls vlc_cond_signal() or vlc_cond_broadcast() on the same
 * condition variable, the thread is cancelled with vlc_cancel(), or the
 * system causes a &quot;spurious&quot; unsolicited wake-up.
 *
 * A mutex is needed to wait on a condition variable. It must &lt;b&gt;not&lt;/b&gt; be
 * a recursive mutex. Although it is possible to use the same mutex for
 * multiple condition, it is not valid to use different mutexes for the same
 * condition variable at the same time from different threads.
 *
 * In case of thread cancellation, the mutex is always locked before
 * cancellation proceeds.
 *
 * The canonical way to use a condition variable to wait for event foobar is:
 @code
   vlc_mutex_lock (&amp;lock);
   mutex_cleanup_push (&amp;lock); // release the mutex in case of cancellation

   while (!foobar)
       vlc_cond_wait (&amp;wait, &amp;lock);

   --- foobar is now true, do something about it here --

   vlc_cleanup_run (); // release the mutex
  @endcode
 *
 * @param p_condvar condition variable to wait on
 * @param p_mutex mutex which is unlocked while waiting,
 *                then locked again when waking up.
 * @param deadline &lt;b&gt;absolute&lt;/b&gt; timeout
 */</doc>
<use f='vlc/src/posix/timer.c' l='63' u='c' c='vlc_timer_thread'/>
<use f='vlc/src/stream_output/sap.c' l='187' u='c' c='RunThread'/>
<use f='vlc/src/video_output/control.c' l='97' u='c' c='vout_control_WaitEmpty'/>
