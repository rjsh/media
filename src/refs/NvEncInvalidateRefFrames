<dec f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='2859' type='NVENCSTATUS NvEncInvalidateRefFrames(void * encoder, uint64_t invalidRefFrameTimeStamp)'/>
<doc f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='2829'>/**
 * \brief Invalidate reference frames
 *
 * Invalidates reference frame based on the time stamp provided by the client.
 * The encoder marks any reference frames or any frames which have been reconstructed
 * using the corrupt frame as invalid for motion estimation and uses older reference
 * frames for motion estimation. The encoded forces the current frame to be encoded
 * as an intra frame if no reference frames are left after invalidation process.
 * This is useful for low latency application for error resiliency. The client
 * is recommended to set NV_ENC_CONFIG_H264::maxNumRefFrames to a large value so
 * that encoder can keep a backup of older reference frames in the DPB and can use them
 * for motion estimation when the newer reference frames have been invalidated.
 * This API can be called multiple times.
 *
 * \param [in] encoder
 *   Pointer to the NvEncodeAPI interface.
 * \param [in] invalidRefFrameTimeStamp
 *   Timestamp of the invalid reference frames which needs to be invalidated.
 *
 * \return
 * ::NV_ENC_SUCCESS \n
 * ::NV_ENC_ERR_INVALID_PTR \n
 * ::NV_ENC_ERR_INVALID_ENCODERDEVICE \n
 * ::NV_ENC_ERR_DEVICE_NOT_EXIST \n
 * ::NV_ENC_ERR_UNSUPPORTED_PARAM \n
 * ::NV_ENC_ERR_OUT_OF_MEMORY \n
 * ::NV_ENC_ERR_INVALID_PARAM \n
 * ::NV_ENC_ERR_GENERIC \n
 *
 */</doc>
