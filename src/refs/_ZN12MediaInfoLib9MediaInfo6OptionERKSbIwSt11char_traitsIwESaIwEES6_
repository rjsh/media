<dec f='MediaInfoLib/MediaInfo/MediaInfo.h' l='223' type='String MediaInfoLib::MediaInfo::Option(const String &amp; Option, const String &amp; Value = String())'/>
<def f='MediaInfoLib/MediaInfo/MediaInfo.cpp' l='198' type='String MediaInfoLib::MediaInfo::Option(const String &amp; Option, const String &amp; Value = String())'/>
<doc f='MediaInfoLib/MediaInfo/MediaInfo.cpp' l='193'>//***************************************************************************
// Information
//***************************************************************************

//---------------------------------------------------------------------------</doc>
<doc f='MediaInfoLib/MediaInfo/MediaInfo.h' l='184'>//Info
        /// Configure or get information about MediaInfoLib
        /// @param Option The name of option
        /// @param Value The value of option
        /// @return Depend of the option: by default &quot;&quot; (nothing) means No, other means Yes
        /// @post Known options are: \n
        ///       * (NOT IMPLEMENTED YET) &quot;BlockMethod&quot;: Configure when Open Method must return (default or not command not understood: &quot;1&quot;) \n
        ///                 &quot;0&quot;: Immediatly \n
        ///                 &quot;1&quot;: After geting local information \n
        ///                 &quot;2&quot;: When user interaction is needed, or whan Internet information is get
        ///       * &quot;Complete&quot;: For debug, configure if MediaInfoLib::Inform() show all information (doesn&apos;t care of InfoOption_NoShow tag): shows all information if true, shows only useful for user information if false (No by default)\n
        ///       * &quot;Complete_Get&quot;: return the state of &quot;Complete&quot; \n
        ///       * &quot;Language&quot;: Configure language (default language, and this object); Value is Description of language (format: &quot;Column1;Colum2\n...) \n
        ///                 Column 1: Unique name (&quot;Bytes&quot;, &quot;Title&quot;) \n
        ///                 Column 2: translation (&quot;Octets&quot;, &quot;Titre&quot;) \n
        ///       * &quot;Language_Get&quot;: Get the language file in memory
        ///       * &quot;Language_Update&quot;: Configure language of this object only (for optimisation); Value is Description of language (format: &quot;Column1;Colum2\n...) \n
        ///                 Column 1: Unique name (&quot;Bytes&quot;, &quot;Title&quot;) \n
        ///                 Column 2: translation (&quot;Octets&quot;, &quot;Titre&quot;) \n
        ///       * &quot;Inform&quot;: Configure custom text, See MediaInfoLib::Inform() function; Description of views (format: &quot;Column1;Colum2...) \n
        ///                 Column 1: code (11 lines: &quot;General&quot;, &quot;Video&quot;, &quot;Audio&quot;, &quot;Text&quot;, &quot;Other&quot;, &quot;Begin&quot;, &quot;End&quot;, &quot;Page_Begin&quot;, &quot;Page_Middle&quot;, &quot;Page_End&quot;) \n
        ///                 Column 2: The text to show (exemple: &quot;Audio: %FileName% is at %BitRate/String%&quot;) \n
        ///       * &quot;ParseUnknownExtensions&quot;: Configure if MediaInfo parse files with unknown extension\n
        ///       * &quot;ParseUnknownExtensions_Get&quot;: Get if MediaInfo parse files with unknown extension\n
        ///       * &quot;ShowFiles&quot;: Configure if MediaInfo keep in memory files with specific kind of streams (or no streams); Value is Description of components (format: &quot;Column1;Colum2\n...) \n\n
        ///                 Column 1: code (available: &quot;Nothing&quot; for unknown format, &quot;VideoAudio&quot; for at least 1 video and 1 audio, &quot;VideoOnly&quot; for video streams only, &quot;AudioOnly&quot;, &quot;TextOnly&quot;) \n
        ///                 Column 2: &quot;&quot; (nothing) not keeping, other for keeping
        ///       * (NOT IMPLEMENTED YET) &quot;TagSeparator&quot;: Configure the separator if there are multiple same tags (&quot; | &quot; by default)\n
        ///       * (NOT IMPLEMENTED YET) &quot;TagSeparator_Get&quot;: return the state of &quot;TagSeparator&quot; \n
        ///       * (NOT IMPLEMENTED YET) &quot;Internet&quot;: Authorize Internet connection (Yes by default)
        ///       * (NOT IMPLEMENTED YET) &quot;Internet_Title_Get&quot;: When State=5000, give all possible titles for this file (one per line) \n
        ///                 Form: Author TagSeparator Title TagSeparator Year\n...
        ///       * (NOT IMPLEMENTED YET) &quot;Internet_Title_Set&quot;: Set the Good title (same as given by Internet_Title_Get) \n
        ///                 Form: Author TagSeparator Title TagSeparator Year
        ///       * &quot;Info_Parameters&quot;: Information about what are known unique names for parameters \n
        ///       * &quot;Info_Parameters_CSV&quot;: Information about what are known unique names for parameters, in CSV format \n
        ///       * &quot;Info_Codecs&quot;: Information about which codec is known \n
        ///       * &quot;Info_Version&quot;: Information about the version of MediaInfoLib
        ///       * &quot;Info_Url&quot;: Information about where to find the last version</doc>
<use f='MediaInfoLib/MediaInfoDLL/MediaInfoDLL.cpp' l='824' u='c' c='MediaInfo_Option'/>
