<dec f='include/libcrystalhd/libcrystalhd_if.h' l='120'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='148' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='176' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='214' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='254' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='299' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='338' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='370' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='401' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='451' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='485' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='521' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='568' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='603' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='634' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='665' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='694' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='725' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='756' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='785' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='828' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='877' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='907' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='953' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='989' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1030' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1067' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1103' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1137' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1169' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1197' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1227' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1264' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1297' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1328' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1362' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1392' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1422' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1450' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1477' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1506' u='c'/>
<use f='include/libcrystalhd/libcrystalhd_if.h' l='1531' u='c'/>
<doc f='include/libcrystalhd/libcrystalhd_if.h' l='41'>/*****************************************************************************
******************************************************************************

                            Theory of operation


    The Device Interface Library (DIL) allows application level code, such
as a DirectShow filter, to access the Broadcom CrystalHD decoder driver to
provide hardware decoding for MPEG-2, H.264 (AVC) and VC-1 streams.

    In the Microsoft DirectShow system, the overall system graph would look
like the following:

+--------+  +---------------+  +---------------+  +--------------------+
| Source |-&gt;| Demultiplexer |-&gt;| Audio decoder |-&gt;| DirectSound Device |
+--------+  +---------------+  +---------------+  +--------------------+
                    |
                    |  +-------------------------+  +----------------+
                    +-&gt;| Broadcom decoder filter |-&gt;| Video Renderer |
                       +-------------------------+  +----------------+
                                  |    |
                            +----------------+
                            |  Broadcom DIL  |
                            +----------------+
                                  |    |
                            +-----------------+
                            | Broadcom Driver |
                            +-----------------+

    From the view of the caller, the DIL will accept compressed video streams
and will output decoded video frames or fields to seperate Y and UV buffers.
The DIL is responsible solely for decoding video and has no responsibilities
for audio nor for rendering, as shown in the above diagram.  Audio/video
sychronization is assisted by feeding the DIL with timestamps so that it
may pass those timestamps along with the decoded video.  The timestamped
output video will then be presented at the appropriate time by the renderer.

A minimal implementation would be:

    HANDLE              hBRCMhandle;
    uint8_t             input_buffer[INPUT_SIZE];
    uint8_t             y_output_buffer[WIDTH*HEIGHT];
    uint8_t             uv_output_buffer[WIDTH*HEIGHT];
    BC_DTS_PROC_OUT     sProcOutData = { fill in your values here };
    BC_PIC_INFO_BLOCK   sPIB = { fill in your values here };

    // Acquire handle for device.
    DtsDeviceOpen(&amp;hBRCMhandle, 0);

    // Elemental stream.
    DtsOpenDecoder(hBRCMhandle, 0);

    // H.264, Enable FGT SEI, do not parse metadata, no forced progressive out
    DtsSetVideoParams(hBRCMhandle,0,1,0,0,0);

    // Tell decoder to wait for input from host. (PC)
    DtsStartDecoder(hBRCMhandle);

    // Input buffer address, input buffer size, no timestamp, Unencrypted
    DtsProcInput(hBRCMhandle,input_buffer,sizeof(input_buffer),0,0);

    // Tell PC to wait for data from decoder.
    DtsStartCapture(hBRCMhandle);

    // 16ms timeout, pass pointer to PIB then get the decoded picture.
    DtsProcOutput(hBRCMhandle,16,&amp;sPIB);

    // Stop the decoder.
    DtsStopDecoder(hBRCMhandle);

    // Close the decoder
    DtsCloseDecoder(hBRCMhandle);

    // Release handle for device.
    DtsDeviceClose(hBRCMhandle);

******************************************************************************
*****************************************************************************/</doc>
