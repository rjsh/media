<def f='include/taglib/fileref.h' l='59'/>
<size>16</size>
<doc f='include/taglib/fileref.h' l='41'>/*!
   * FileRef exists to provide a minimal, generic and value-based wrapper around
   * a File.  It is lightweight and implicitly shared, and as such suitable for
   * pass-by-value use.  This hides some of the uglier details of TagLib::File
   * and the non-generic portions of the concrete file implementations.
   *
   * This class is useful in a &quot;simple usage&quot; situation where it is desirable
   * to be able to get and set some of the tag information that is similar
   * across file types.
   *
   * Also note that it is probably a good idea to plug this into your mime
   * type system rather than using the constructor that accepts a file name using
   * the FileTypeResolver.
   *
   * \see FileTypeResolver
   * \see addFileTypeResolver()
   */</doc>
<fun r='_ZN6TagLib7FileRefC1Ev'/>
<fun r='_ZN6TagLib7FileRefC1EPKcbNS_15AudioProperties9ReadStyleE'/>
<fun r='_ZN6TagLib7FileRefC1EPNS_4FileE'/>
<fun r='_ZN6TagLib7FileRefC1ERKS0_'/>
<fun r='_ZN6TagLib7FileRefD1Ev'/>
<fun r='_ZNK6TagLib7FileRef3tagEv'/>
<fun r='_ZNK6TagLib7FileRef15audioPropertiesEv'/>
<fun r='_ZNK6TagLib7FileRef4fileEv'/>
<fun r='_ZN6TagLib7FileRef4saveEv'/>
<fun r='_ZN6TagLib7FileRef19addFileTypeResolverEPKNS0_16FileTypeResolverE'/>
<fun r='_ZN6TagLib7FileRef21defaultFileExtensionsEv'/>
<fun r='_ZNK6TagLib7FileRef6isNullEv'/>
<fun r='_ZN6TagLib7FileRefaSERKS0_'/>
<fun r='_ZNK6TagLib7FileRefeqERKS0_'/>
<fun r='_ZNK6TagLib7FileRefneERKS0_'/>
<fun r='_ZN6TagLib7FileRef6createEPKcbNS_15AudioProperties9ReadStyleE'/>
<mbr r='TagLib::FileRef::d' o='64' t='TagLib::FileRef::FileRefPrivate *'/>
