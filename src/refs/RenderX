<dec f='vlc/modules/video_filter/deinterlace/algo_x.h' l='53' type='void RenderX(picture_t * p_outpic, picture_t * p_pic)'/>
<doc f='vlc/modules/video_filter/deinterlace/algo_x.h' l='34'>/**
 * Interpolating deinterlace filter &quot;X&quot;.
 *
 * The algorithm works on a 8x8 block basic, it copies the top field
 * and applies a process to recreate the bottom field.
 *
 * If a 8x8 block is classified as :
 *   - progressive: it applies a small blend (1,6,1)
 *   - interlaced:
 *    * in the MMX version: we do a ME between the 2 fields, if there is a
 *      good match we use MC to recreate the bottom field (with a small
 *      blend (1,6,1) )
 *    * otherwise: it recreates the bottom field by an edge oriented
 *      interpolation.
 *
 * @param[in] p_pic Input frame.
 * @param[out] p_outpic Output frame. Must be allocated by caller.
 * @see Deinterlace()
 */</doc>
<def f='vlc/modules/video_filter/deinterlace/algo_x.c' l='540' type='void RenderX(picture_t * p_outpic, picture_t * p_pic)'/>
<doc f='vlc/modules/video_filter/deinterlace/algo_x.c' l='536'>/*****************************************************************************
 * Public functions
 *****************************************************************************/</doc>
<use f='vlc/modules/video_filter/deinterlace/algo_yadif.c' l='185' u='c' c='RenderYadif'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='472' u='c' c='Deinterlace'/>
