<dec f='include/FLAC/stream_encoder.h' l='865' type='FLAC__bool FLAC__stream_encoder_set_compression_level(FLAC__StreamEncoder * encoder, unsigned int value)'/>
<doc f='include/FLAC/stream_encoder.h' l='804'>/** Set the compression level
 *
 * The compression level is roughly proportional to the amount of effort
 * the encoder expends to compress the file.  A higher level usually
 * means more computation but higher compression.  The default level is
 * suitable for most applications.
 *
 * Currently the levels range from \c 0 (fastest, least compression) to
 * \c 8 (slowest, most compression).  A value larger than \c 8 will be
 * treated as \c 8.
 *
 * This function automatically calls the following other \c _set_
 * functions with appropriate values, so the client does not need to
 * unless it specifically wants to override them:
 * - FLAC__stream_encoder_set_do_mid_side_stereo()
 * - FLAC__stream_encoder_set_loose_mid_side_stereo()
 * - FLAC__stream_encoder_set_apodization()
 * - FLAC__stream_encoder_set_max_lpc_order()
 * - FLAC__stream_encoder_set_qlp_coeff_precision()
 * - FLAC__stream_encoder_set_do_qlp_coeff_prec_search()
 * - FLAC__stream_encoder_set_do_escape_coding()
 * - FLAC__stream_encoder_set_do_exhaustive_model_search()
 * - FLAC__stream_encoder_set_min_residual_partition_order()
 * - FLAC__stream_encoder_set_max_residual_partition_order()
 * - FLAC__stream_encoder_set_rice_parameter_search_dist()
 *
 * The actual values set for each level are:
 * &lt;table&gt;
 * &lt;tr&gt;
 *  &lt;td&gt;&lt;b&gt;level&lt;/b&gt;&lt;td&gt;
 *  &lt;td&gt;do mid-side stereo&lt;td&gt;
 *  &lt;td&gt;loose mid-side stereo&lt;td&gt;
 *  &lt;td&gt;apodization&lt;td&gt;
 *  &lt;td&gt;max lpc order&lt;td&gt;
 *  &lt;td&gt;qlp coeff precision&lt;td&gt;
 *  &lt;td&gt;qlp coeff prec search&lt;td&gt;
 *  &lt;td&gt;escape coding&lt;td&gt;
 *  &lt;td&gt;exhaustive model search&lt;td&gt;
 *  &lt;td&gt;min residual partition order&lt;td&gt;
 *  &lt;td&gt;max residual partition order&lt;td&gt;
 *  &lt;td&gt;rice parameter search dist&lt;td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;0&lt;/b&gt;&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;0&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;td&gt;3&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;1&lt;/b&gt;&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;true&lt;td&gt;   &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;0&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;td&gt;3&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;2&lt;/b&gt;&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;false&lt;td&gt;  &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;0&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;td&gt;3&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;3&lt;/b&gt;&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;6&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;td&gt;4&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;4&lt;/b&gt;&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;true&lt;td&gt;   &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;8&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;td&gt;4&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;5&lt;/b&gt;&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;false&lt;td&gt;  &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;8&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;td&gt;5&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;6&lt;/b&gt;&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;false&lt;td&gt;  &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;8&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;td&gt;6&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;7&lt;/b&gt;&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;false&lt;td&gt;  &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;8&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;6&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;tr&gt;  &lt;td&gt;&lt;b&gt;8&lt;/b&gt;&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;false&lt;td&gt;  &lt;td&gt;tukey(0.5)&lt;td&gt;  &lt;td&gt;12&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;false&lt;td&gt;  &lt;td&gt;true&lt;td&gt;   &lt;td&gt;0&lt;td&gt;  &lt;td&gt;6&lt;td&gt;  &lt;td&gt;0&lt;td&gt;  &lt;/tr&gt;
 * &lt;/table&gt;
 *
 * \default \c 5
 * \param  encoder  An encoder instance to set.
 * \param  value    See above.
 * \assert
 *    \code encoder != NULL \endcode
 * \retval FLAC__bool
 *    \c false if the encoder is already initialized, else \c true.
 */</doc>
