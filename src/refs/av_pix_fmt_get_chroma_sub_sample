<dec f='ffmpeg/libavutil/pixdesc.h' l='228' type='int av_pix_fmt_get_chroma_sub_sample(enum AVPixelFormat pix_fmt, int * h_shift, int * v_shift)'/>
<doc f='ffmpeg/libavutil/pixdesc.h' l='213'>/**
 * Utility function to access log2_chroma_w log2_chroma_h from
 * the pixel format AVPixFmtDescriptor.
 *
 * See av_get_chroma_sub_sample() for a function that asserts a
 * valid pixel format instead of returning an error code.
 * Its recommended that you use avcodec_get_chroma_sub_sample unless
 * you do check the return code!
 *
 * @param[in]  pix_fmt the pixel format
 * @param[out] h_shift store log2_chroma_w (horizontal/width shift)
 * @param[out] v_shift store log2_chroma_h (vertical/height shift)
 *
 * @return 0 on success, AVERROR(ENOSYS) on invalid or unknown pixel format
 */</doc>
<use f='ffmpeg/libavcodec/avrndec.c' l='116' u='c' c='decode_frame'/>
<use f='ffmpeg/libavcodec/h264_slice.c' l='215' u='c' c='alloc_picture'/>
<use f='ffmpeg/libavcodec/h264_slice.c' l='912' u='c' c='h264_slice_header_init'/>
<use f='ffmpeg/libavcodec/huffyuvdec.c' l='408' u='c' c='decode_init'/>
<use f='ffmpeg/libavcodec/huffyuvenc.c' l='251' u='c' c='encode_init'/>
<use f='ffmpeg/libavcodec/lcldec.c' l='534' u='c' c='decode_init'/>
<use f='ffmpeg/libavcodec/mjpegdec.c' l='1273' u='c' c='mjpeg_decode_scan'/>
<use f='ffmpeg/libavcodec/mjpegenc.c' l='225' u='c' c='amv_encode_picture'/>
<use f='ffmpeg/libavcodec/mjpegenc_common.c' l='179' u='c' c='ff_mjpeg_init_hvsample'/>
<use f='ffmpeg/libavcodec/mpegvideo.c' l='1173' u='c' c='gray_frame'/>
<use f='ffmpeg/libavcodec/mpegvideo.c' l='1289' u='c' c='ff_mpv_frame_start'/>
<use f='ffmpeg/libavcodec/mpegvideo_enc.c' l='1281' u='c' c='load_input_picture'/>
<use f='ffmpeg/libavcodec/tiffenc.c' l='301' u='c' c='encode_frame'/>
<use f='ffmpeg/libavformat/vpcc.c' l='77' u='c' c='get_vpx_chroma_subsampling'/>
<use f='ffmpeg/libavformat/yuv4mpegenc.c' l='219' u='c' c='yuv4_write_packet'/>
<def f='ffmpeg/libavutil/pixdesc.c' l='2294' type='int av_pix_fmt_get_chroma_sub_sample(enum AVPixelFormat pix_fmt, int * h_shift, int * v_shift)'/>
<use f='ffmpeg/libswscale/utils.c' l='1272' u='c' c='sws_init_context'/>
<use f='ffmpeg/libswscale/utils.c' l='1273' u='c' c='sws_init_context'/>
<dec f='include/libavutil/pixdesc.h' l='219' type='int av_pix_fmt_get_chroma_sub_sample(enum AVPixelFormat pix_fmt, int * h_shift, int * v_shift)'/>
<doc f='include/libavutil/pixdesc.h' l='209'>/**
 * Utility function to access log2_chroma_w log2_chroma_h from
 * the pixel format AVPixFmtDescriptor.
 *
 * @param[in]  pix_fmt the pixel format
 * @param[out] h_shift store log2_chroma_h
 * @param[out] v_shift store log2_chroma_w
 *
 * @return 0 on success, AVERROR(ENOSYS) on invalid or unknown pixel format
 */</doc>
