<def f='ffmpeg/libavutil/frame.h' l='184'/>
<size>488</size>
<doc f='ffmpeg/libavutil/frame.h' l='151'>/**
 * This structure describes decoded (raw) audio or video data.
 *
 * AVFrame must be allocated using av_frame_alloc(). Note that this only
 * allocates the AVFrame itself, the buffers for the data must be managed
 * through other means (see below).
 * AVFrame must be freed with av_frame_free().
 *
 * AVFrame is typically allocated once and then reused multiple times to hold
 * different data (e.g. a single AVFrame to hold frames received from a
 * decoder). In such a case, av_frame_unref() will free any references held by
 * the frame and reset it to its original clean state before it
 * is reused again.
 *
 * The data described by an AVFrame is usually reference counted through the
 * AVBuffer API. The underlying buffer references are stored in AVFrame.buf /
 * AVFrame.extended_buf. An AVFrame is considered to be reference counted if at
 * least one reference is set, i.e. if AVFrame.buf[0] != NULL. In such a case,
 * every single data plane must be contained in one of the buffers in
 * AVFrame.buf or AVFrame.extended_buf.
 * There may be a single buffer for all the data, or one separate buffer for
 * each plane, or anything in between.
 *
 * sizeof(AVFrame) is not a part of the public ABI, so new fields may be added
 * to the end with a minor bump.
 * Similarly fields that are marked as to be only accessed by
 * av_opt_ptr() can be reordered. This allows 2 forks to add fields
 * without breaking compatibility with each other.
 *
 * Fields can be accessed through AVOptions, the name string used, matches the
 * C structure field name for fields accessible through AVOptions. The AVClass
 * for AVFrame can be obtained from avcodec_get_frame_class()
 */</doc>
<mbr r='AVFrame::data' o='0' t='uint8_t *[8]'/>
<mbr r='AVFrame::linesize' o='512' t='int [8]'/>
<mbr r='AVFrame::extended_data' o='768' t='uint8_t **'/>
<mbr r='AVFrame::width' o='832' t='int'/>
<mbr r='AVFrame::height' o='864' t='int'/>
<mbr r='AVFrame::nb_samples' o='896' t='int'/>
<mbr r='AVFrame::format' o='928' t='int'/>
<mbr r='AVFrame::key_frame' o='960' t='int'/>
<mbr r='AVFrame::pict_type' o='992' t='enum AVPictureType'/>
<mbr r='AVFrame::sample_aspect_ratio' o='1024' t='AVRational'/>
<mbr r='AVFrame::pts' o='1088' t='int64_t'/>
<mbr r='AVFrame::pkt_pts' o='1152' t='int64_t'/>
<mbr r='AVFrame::pkt_dts' o='1216' t='int64_t'/>
<mbr r='AVFrame::coded_picture_number' o='1280' t='int'/>
<mbr r='AVFrame::display_picture_number' o='1312' t='int'/>
<mbr r='AVFrame::quality' o='1344' t='int'/>
<mbr r='AVFrame::opaque' o='1408' t='void *'/>
<mbr r='AVFrame::error' o='1472' t='uint64_t [8]'/>
<mbr r='AVFrame::repeat_pict' o='1984' t='int'/>
<mbr r='AVFrame::interlaced_frame' o='2016' t='int'/>
<mbr r='AVFrame::top_field_first' o='2048' t='int'/>
<mbr r='AVFrame::palette_has_changed' o='2080' t='int'/>
<mbr r='AVFrame::reordered_opaque' o='2112' t='int64_t'/>
<mbr r='AVFrame::sample_rate' o='2176' t='int'/>
<mbr r='AVFrame::channel_layout' o='2240' t='uint64_t'/>
<mbr r='AVFrame::buf' o='2304' t='AVBufferRef *[8]'/>
<mbr r='AVFrame::extended_buf' o='2816' t='AVBufferRef **'/>
<mbr r='AVFrame::nb_extended_buf' o='2880' t='int'/>
<mbr r='AVFrame::side_data' o='2944' t='AVFrameSideData **'/>
<mbr r='AVFrame::nb_side_data' o='3008' t='int'/>
<mbr r='AVFrame::flags' o='3040' t='int'/>
<mbr r='AVFrame::color_range' o='3072' t='enum AVColorRange'/>
<mbr r='AVFrame::color_primaries' o='3104' t='enum AVColorPrimaries'/>
<mbr r='AVFrame::color_trc' o='3136' t='enum AVColorTransferCharacteristic'/>
<mbr r='AVFrame::colorspace' o='3168' t='enum AVColorSpace'/>
<mbr r='AVFrame::chroma_location' o='3200' t='enum AVChromaLocation'/>
<mbr r='AVFrame::best_effort_timestamp' o='3264' t='int64_t'/>
<mbr r='AVFrame::pkt_pos' o='3328' t='int64_t'/>
<mbr r='AVFrame::pkt_duration' o='3392' t='int64_t'/>
<mbr r='AVFrame::metadata' o='3456' t='AVDictionary *'/>
<mbr r='AVFrame::decode_error_flags' o='3520' t='int'/>
<mbr r='AVFrame::channels' o='3552' t='int'/>
<mbr r='AVFrame::pkt_size' o='3584' t='int'/>
<mbr r='AVFrame::qscale_table' o='3648' t='int8_t *'/>
<mbr r='AVFrame::qstride' o='3712' t='int'/>
<mbr r='AVFrame::qscale_type' o='3744' t='int'/>
<mbr r='AVFrame::qp_table_buf' o='3776' t='AVBufferRef *'/>
<mbr r='AVFrame::hw_frames_ctx' o='3840' t='AVBufferRef *'/>
<def f='include/libavcodec/avcodec.h' l='989'/>
<size>464</size>
<doc f='include/libavcodec/avcodec.h' l='974'>/**
 * This structure describes decoded (raw) audio or video data.
 *
 * AVFrame must be allocated using avcodec_alloc_frame() and freed with
 * avcodec_free_frame(). Note that this allocates only the AVFrame itself. The
 * buffers for the data must be managed through other means.
 *
 * AVFrame is typically allocated once and then reused multiple times to hold
 * different data (e.g. a single AVFrame to hold frames received from a
 * decoder). In such a case, avcodec_get_frame_defaults() should be used to
 * reset the frame to its original clean state before it is reused again.
 *
 * sizeof(AVFrame) is not a part of the public ABI, so new fields may be added
 * to the end with a minor bump.
 */</doc>
<mbr r='AVFrame::data' o='0' t='uint8_t *[8]'/>
<mbr r='AVFrame::linesize' o='512' t='int [8]'/>
<mbr r='AVFrame::extended_data' o='768' t='uint8_t **'/>
<mbr r='AVFrame::width' o='832' t='int'/>
<mbr r='AVFrame::height' o='864' t='int'/>
<mbr r='AVFrame::nb_samples' o='896' t='int'/>
<mbr r='AVFrame::format' o='928' t='int'/>
<mbr r='AVFrame::key_frame' o='960' t='int'/>
<mbr r='AVFrame::pict_type' o='992' t='enum AVPictureType'/>
<mbr r='AVFrame::base' o='1024' t='uint8_t *[8]'/>
<mbr r='AVFrame::sample_aspect_ratio' o='1536' t='AVRational'/>
<mbr r='AVFrame::pts' o='1600' t='int64_t'/>
<mbr r='AVFrame::pkt_pts' o='1664' t='int64_t'/>
<mbr r='AVFrame::pkt_dts' o='1728' t='int64_t'/>
<mbr r='AVFrame::coded_picture_number' o='1792' t='int'/>
<mbr r='AVFrame::display_picture_number' o='1824' t='int'/>
<mbr r='AVFrame::quality' o='1856' t='int'/>
<mbr r='AVFrame::reference' o='1888' t='int'/>
<mbr r='AVFrame::qscale_table' o='1920' t='int8_t *'/>
<mbr r='AVFrame::qstride' o='1984' t='int'/>
<mbr r='AVFrame::qscale_type' o='2016' t='int'/>
<mbr r='AVFrame::mbskip_table' o='2048' t='uint8_t *'/>
<mbr r='AVFrame::motion_val' o='2112' t='int16_t (*[2])[2]'/>
<mbr r='AVFrame::mb_type' o='2240' t='uint32_t *'/>
<mbr r='AVFrame::dct_coeff' o='2304' t='short *'/>
<mbr r='AVFrame::ref_index' o='2368' t='int8_t *[2]'/>
<mbr r='AVFrame::opaque' o='2496' t='void *'/>
<mbr r='AVFrame::error' o='2560' t='uint64_t [8]'/>
<mbr r='AVFrame::type' o='3072' t='int'/>
<mbr r='AVFrame::repeat_pict' o='3104' t='int'/>
<mbr r='AVFrame::interlaced_frame' o='3136' t='int'/>
<mbr r='AVFrame::top_field_first' o='3168' t='int'/>
<mbr r='AVFrame::palette_has_changed' o='3200' t='int'/>
<mbr r='AVFrame::buffer_hints' o='3232' t='int'/>
<mbr r='AVFrame::pan_scan' o='3264' t='AVPanScan *'/>
<mbr r='AVFrame::reordered_opaque' o='3328' t='int64_t'/>
<mbr r='AVFrame::hwaccel_picture_private' o='3392' t='void *'/>
<mbr r='AVFrame::owner' o='3456' t='struct AVCodecContext *'/>
<mbr r='AVFrame::thread_opaque' o='3520' t='void *'/>
<mbr r='AVFrame::motion_subsample_log2' o='3584' t='uint8_t'/>
<mbr r='AVFrame::sample_rate' o='3616' t='int'/>
<mbr r='AVFrame::channel_layout' o='3648' t='uint64_t'/>
