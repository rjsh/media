<dec f='ffmpeg/libavformat/avformat.h' l='2746' type='void av_url_split(char * proto, int proto_size, char * authorization, int authorization_size, char * hostname, int hostname_size, int * port_ptr, char * path, int path_size, const char * url)'/>
<doc f='ffmpeg/libavformat/avformat.h' l='2727'>/**
 * Split a URL string into components.
 *
 * The pointers to buffers for storing individual components may be null,
 * in order to ignore that component. Buffers for components not found are
 * set to empty strings. If the port is not found, it is set to a negative
 * value.
 *
 * @param proto the buffer for the protocol
 * @param proto_size the size of the proto buffer
 * @param authorization the buffer for the authorization
 * @param authorization_size the size of the authorization buffer
 * @param hostname the buffer for the host name
 * @param hostname_size the size of the hostname buffer
 * @param port_ptr a pointer to store the port number in
 * @param path the buffer for the path
 * @param path_size the size of the path buffer
 * @param url the URL to split
 */</doc>
<use f='ffmpeg/ffserver.c' l='3037' u='c' c='rtsp_cmd_describe'/>
<use f='ffmpeg/ffserver.c' l='3115' u='c' c='rtsp_cmd_setup'/>
<use f='ffmpeg/ffserver.c' l='3264' u='c' c='find_rtp_session_with_url'/>
<use f='ffmpeg/libavformat/ftp.c' l='665' u='c' c='ftp_connect'/>
<use f='ffmpeg/libavformat/ftp.c' l='1092' u='c' c='ftp_move'/>
<use f='ffmpeg/libavformat/gopher.c' l='87' u='c' c='gopher_open'/>
<use f='ffmpeg/libavformat/http.c' l='191' u='c' c='http_open_cnx_internal'/>
<use f='ffmpeg/libavformat/http.c' l='220' u='c' c='http_open_cnx_internal'/>
<use f='ffmpeg/libavformat/http.c' l='458' u='c' c='http_listen'/>
<use f='ffmpeg/libavformat/http.c' l='1589' u='c' c='http_proxy_open'/>
<use f='ffmpeg/libavformat/icecast.c' l='127' u='c' c='icecast_open'/>
<use f='ffmpeg/libavformat/mmsh.c' l='227' u='c' c='mmsh_open_internal'/>
<use f='ffmpeg/libavformat/mmst.c' l='522' u='c' c='mms_open'/>
<use f='ffmpeg/libavformat/mov.c' l='3464' u='c' c='test_same_origin'/>
<use f='ffmpeg/libavformat/mov.c' l='3465' u='c' c='test_same_origin'/>
<use f='ffmpeg/libavformat/rtmphttp.c' l='190' u='c' c='rtmp_http_open'/>
<use f='ffmpeg/libavformat/rtmpproto.c' l='2622' u='c' c='rtmp_open'/>
<use f='ffmpeg/libavformat/rtpproto.c' l='108' u='c' c='ff_rtp_set_remote_url'/>
<use f='ffmpeg/libavformat/rtpproto.c' l='328' u='c' c='rtp_open'/>
<use f='ffmpeg/libavformat/rtsp.c' l='539' u='c' c='sdp_parse_line'/>
<use f='ffmpeg/libavformat/rtsp.c' l='1692' u='c' c='ff_rtsp_connect'/>
<use f='ffmpeg/libavformat/rtsp.c' l='2454' u='c' c='rtp_read_header'/>
<use f='ffmpeg/libavformat/rtspdec.c' l='439' u='c' c='parse_command_line'/>
<use f='ffmpeg/libavformat/rtspdec.c' l='441' u='c' c='parse_command_line'/>
<use f='ffmpeg/libavformat/rtspdec.c' l='647' u='c' c='rtsp_listen'/>
<use f='ffmpeg/libavformat/rtspdec.c' l='808' u='c' c='resetup_tcp'/>
<use f='ffmpeg/libavformat/sapdec.c' l='76' u='c' c='sap_read_header'/>
<use f='ffmpeg/libavformat/sapenc.c' l='86' u='c' c='sap_write_header'/>
<use f='ffmpeg/libavformat/sdp.c' l='128' u='c' c='sdp_get_address'/>
<use f='ffmpeg/libavformat/srtpproto.c' l='80' u='c' c='srtp_open'/>
<use f='ffmpeg/libavformat/tcp.c' l='78' u='c' c='tcp_open'/>
<use f='ffmpeg/libavformat/udp.c' l='449' u='c' c='ff_udp_set_remote_url'/>
<use f='ffmpeg/libavformat/udp.c' l='804' u='c' c='udp_open'/>
<def f='ffmpeg/libavformat/utils.c' l='4440' type='void av_url_split(char * proto, int proto_size, char * authorization, int authorization_size, char * hostname, int hostname_size, int * port_ptr, char * path, int path_size, const char * url)'/>
<dec f='include/libavformat/avformat.h' l='1648' type='void av_url_split(char * proto, int proto_size, char * authorization, int authorization_size, char * hostname, int hostname_size, int * port_ptr, char * path, int path_size, const char * url)'/>
<doc f='include/libavformat/avformat.h' l='1629'>/**
 * Split a URL string into components.
 *
 * The pointers to buffers for storing individual components may be null,
 * in order to ignore that component. Buffers for components not found are
 * set to empty strings. If the port is not found, it is set to a negative
 * value.
 *
 * @param proto the buffer for the protocol
 * @param proto_size the size of the proto buffer
 * @param authorization the buffer for the authorization
 * @param authorization_size the size of the authorization buffer
 * @param hostname the buffer for the host name
 * @param hostname_size the size of the hostname buffer
 * @param port_ptr a pointer to store the port number in
 * @param path the buffer for the path
 * @param path_size the size of the path buffer
 * @param url the URL to split
 */</doc>
