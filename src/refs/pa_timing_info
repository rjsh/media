<def f='include/pulse/def.h' l='630'/>
<size>104</size>
<doc f='include/pulse/def.h' l='612'>/** A structure for all kinds of timing information of a stream. See
 * pa_stream_update_timing_info() and pa_stream_get_timing_info(). The
 * total output latency a sample that is written with
 * pa_stream_write() takes to be played may be estimated by
 * sink_usec+buffer_usec+transport_usec. (where buffer_usec is defined
 * as pa_bytes_to_usec(write_index-read_index)) The output buffer
 * which buffer_usec relates to may be manipulated freely (with
 * pa_stream_write()&apos;s seek argument, pa_stream_flush() and friends),
 * the buffers sink_usec and source_usec relate to are first-in
 * first-out (FIFO) buffers which cannot be flushed or manipulated in
 * any way. The total input latency a sample that is recorded takes to
 * be delivered to the application is:
 * source_usec+buffer_usec+transport_usec-sink_usec. (Take care of
 * sign issues!) When connected to a monitor source sink_usec contains
 * the latency of the owning sink. The two latency estimations
 * described here are implemented in pa_stream_get_latency(). Please
 * note that this structure can be extended as part of evolutionary
 * API updates at any time in any new release.*/</doc>
<mbr r='pa_timing_info::timestamp' o='0' t='struct timeval'/>
<mbr r='pa_timing_info::synchronized_clocks' o='128' t='int'/>
<mbr r='pa_timing_info::sink_usec' o='192' t='pa_usec_t'/>
<mbr r='pa_timing_info::source_usec' o='256' t='pa_usec_t'/>
<mbr r='pa_timing_info::transport_usec' o='320' t='pa_usec_t'/>
<mbr r='pa_timing_info::playing' o='384' t='int'/>
<mbr r='pa_timing_info::write_index_corrupt' o='416' t='int'/>
<mbr r='pa_timing_info::write_index' o='448' t='int64_t'/>
<mbr r='pa_timing_info::read_index_corrupt' o='512' t='int'/>
<mbr r='pa_timing_info::read_index' o='576' t='int64_t'/>
<mbr r='pa_timing_info::configured_sink_usec' o='640' t='pa_usec_t'/>
<mbr r='pa_timing_info::configured_source_usec' o='704' t='pa_usec_t'/>
<mbr r='pa_timing_info::since_underrun' o='768' t='int64_t'/>
