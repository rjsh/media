<dec f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='2039' type='NVENCSTATUS NvEncGetEncodePresetGUIDs(void * encoder, GUID encodeGUID, GUID * presetGUIDs, uint32_t guidArraySize, uint32_t * encodePresetGUIDCount)'/>
<doc f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='1999'>/**
 * \brief Receives an array of supported encoder preset GUIDs.
 *
 * The function returns an array of encode preset guids available for a given codec.
 * The client can directly use one of the preset guids based upon the use case
 * or target device. The preset guid chosen can be directly used in
 * NV_ENC_INITIALIZE_PARAMS::presetGUID parameter to ::NvEncEncodePicture() API.
 * Alternately client can  also use the preset guid to retrieve the encoding config
 * parameters being used by NvEncodeAPI interface for that given preset, using
 * ::NvEncGetEncodePresetConfig() API. It can then modify preset config parameters
 * as per its use case and send it to NvEncodeAPI interface as part of
 * NV_ENC_INITIALIZE_PARAMS::encodeConfig parameter for NvEncInitializeEncoder()
 * API.
 *
 *
 * \param [in] encoder
 *   Pointer to the NvEncodeAPI interface.
 * \param [in] encodeGUID
 *   Encode GUID, corresponding to which the list of supported presets is to be
 *   retrieved.
 * \param [in] guidArraySize
 *   Size of array of preset guids passed in \p preset GUIDs
 * \param [out] presetGUIDs
 *   Array of supported Encode preset GUIDs from the NvEncodeAPI interface
 *   to client.
 * \param [out] encodePresetGUIDCount
 *   Receives the number of preset GUIDs returned by the NvEncodeAPI
 *   interface.
 *
 * \return
 * ::NV_ENC_SUCCESS \n
 * ::NV_ENC_ERR_INVALID_PTR \n
 * ::NV_ENC_ERR_INVALID_ENCODERDEVICE \n
 * ::NV_ENC_ERR_DEVICE_NOT_EXIST \n
 * ::NV_ENC_ERR_UNSUPPORTED_PARAM \n
 * ::NV_ENC_ERR_OUT_OF_MEMORY \n
 * ::NV_ENC_ERR_INVALID_PARAM \n
 * ::NV_ENC_ERR_GENERIC \n
 *
 */</doc>
