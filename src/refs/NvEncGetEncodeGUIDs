<dec f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='1803' type='NVENCSTATUS NvEncGetEncodeGUIDs(void * encoder, GUID * GUIDs, uint32_t guidArraySize, uint32_t * GUIDCount)'/>
<doc f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='1772'>/**
 * \brief Retrieves an array of supported encoder codec GUIDs.
 *
 * The function returns an array of codec guids supported by the NvEncodeAPI interface.
 * The client must allocate an array where the NvEncodeAPI interface can
 * fill the supported guids and pass the pointer in \p *GUIDs parameter.
 * The size of the array can be determined by using ::NvEncGetEncodeGUIDCount() API.
 * The Nvidia Encoding interface returns the number of codec guids it has actually
 * filled in the guid array in the \p GUIDCount parameter.
 *
 * \param [in] encoder
 *   Pointer to the NvEncodeAPI interface.
 * \param [in] guidArraySize
 *   Number of GUIDs to retrieved. Should be set to the number retrieved using
 *   ::NvEncGetEncodeGUIDCount.
 * \param [out] GUIDs
 *   Array of supported Encode GUIDs.
 * \param [out] GUIDCount
 *   Number of supported Encode GUIDs.
 *
 * \return
 * ::NV_ENC_SUCCESS \n
 * ::NV_ENC_ERR_INVALID_PTR \n
 * ::NV_ENC_ERR_INVALID_ENCODERDEVICE \n
 * ::NV_ENC_ERR_DEVICE_NOT_EXIST \n
 * ::NV_ENC_ERR_UNSUPPORTED_PARAM \n
 * ::NV_ENC_ERR_OUT_OF_MEMORY \n
 * ::NV_ENC_ERR_INVALID_PARAM \n
 * ::NV_ENC_ERR_GENERIC \n
 *
 */</doc>
