<dec f='include/va/va.h' l='1731' type='VAStatus vaCreateBuffer(VADisplay dpy, VAContextID context, VABufferType type, unsigned int size, unsigned int num_elements, void * data, VABufferID * buf_id)'/>
<doc f='include/va/va.h' l='1717'>/*
 * Creates a buffer for &quot;num_elements&quot; elements of &quot;size&quot; bytes and 
 * initalize with &quot;data&quot;.
 * if &quot;data&quot; is null, then the contents of the buffer data store
 * are undefined.
 * Basically there are two ways to get buffer data to the server side. One is 
 * to call vaCreateBuffer() with a non-null &quot;data&quot;, which results the data being
 * copied to the data store on the server side.  A different method that 
 * eliminates this copy is to pass null as &quot;data&quot; when calling vaCreateBuffer(),
 * and then use vaMapBuffer() to map the data store from the server side to the
 * client address space for access.
 *  Note: image buffers are created by the library, not the client. Please see 
 *        vaCreateImage on how image buffers are managed.
 */</doc>
<use f='ffmpeg/libavcodec/vaapi.c' l='128' u='c' c='ff_vaapi_commit_slices'/>
<use f='ffmpeg/libavcodec/vaapi.c' l='137' u='c' c='ff_vaapi_commit_slices'/>
<use f='ffmpeg/libavcodec/vaapi.c' l='156' u='c' c='alloc_buffer'/>
<use f='ffmpeg/libavcodec/vaapi_encode.c' l='47' u='c' c='vaapi_encode_make_packed_header'/>
<use f='ffmpeg/libavcodec/vaapi_encode.c' l='58' u='c' c='vaapi_encode_make_packed_header'/>
<use f='ffmpeg/libavcodec/vaapi_encode.c' l='84' u='c' c='vaapi_encode_make_param_buffer'/>
<use f='ffmpeg/libavcodec/vaapi_encode.c' l='181' u='c' c='vaapi_encode_issue'/>
<use f='ffmpeg/libavfilter/vf_scale_vaapi.c' l='316' u='c' c='scale_vaapi_filter_frame'/>
