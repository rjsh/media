<dec f='ffmpeg/libswresample/swresample.h' l='330' type='int64_t swr_next_pts(struct SwrContext * s, int64_t pts)'/>
<use f='ffmpeg/libavfilter/af_aresample.c' l='209' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/af_aresample.c' l='246' u='c' c='flush_frame'/>
<doc f='ffmpeg/libswresample/swresample.h' l='313'>/**
 * Convert the next timestamp from input to output
 * timestamps are in 1/(in_sample_rate * out_sample_rate) units.
 *
 * @note There are 2 slightly differently behaving modes.
 *       @li When automatic timestamp compensation is not used, (min_compensation &gt;= FLT_MAX)
 *              in this case timestamps will be passed through with delays compensated
 *       @li When automatic timestamp compensation is used, (min_compensation &lt; FLT_MAX)
 *              in this case the output timestamps will match output sample numbers.
 *              See ffmpeg-resampler(1) for the two modes of compensation.
 *
 * @param s[in]     initialized Swr context
 * @param pts[in]   timestamp for the next input sample, INT64_MIN if unknown
 * @see swr_set_compensation(), swr_drop_output(), and swr_inject_silence() are
 *      function used internally for timestamp compensation.
 * @return the output timestamp for the next output sample
 */</doc>
<def f='ffmpeg/libswresample/swresample.c' l='910' type='int64_t swr_next_pts(struct SwrContext * s, int64_t pts)'/>
