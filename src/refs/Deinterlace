<dec f='vlc/modules/video_filter/deinterlace/deinterlace.h' l='171' type='picture_t * Deinterlace(filter_t * p_filter, picture_t * p_pic)'/>
<doc f='vlc/modules/video_filter/deinterlace/deinterlace.h' l='130'>/**
 * Top-level filtering method.
 *
 * Open() sets this up as the processing method (pf_video_filter)
 * in the filter structure.
 *
 * Note that there is no guarantee that the returned picture directly
 * corresponds to p_pic. The first few times, the filter may not even
 * return a picture, if it is still filling the history for temporal
 * filtering (although such filters often return *something* also
 * while starting up). It should be assumed that N input pictures map to
 * M output pictures, with no restrictions for N and M (except that there
 * is not much delay).
 *
 * Also, there is no guarantee that the PTS of the frame stays untouched.
 * In fact, framerate doublers automatically compute the proper PTSs for the
 * two output frames for each input frame, and IVTC does a nontrivial
 * framerate conversion (29.97 &gt; 23.976 fps).
 *
 * Yadif has an offset of one frame between input and output, but introduces
 * no delay: the returned frame is the *previous* input frame deinterlaced,
 * complete with its original PTS.
 *
 * Finally, note that returning NULL sometimes can be normal behaviour for some
 * algorithms (e.g. IVTC).
 *
 * Currently:
 *   Most algorithms:        1 -&gt; 1, no offset
 *   All framerate doublers: 1 -&gt; 2, no offset
 *   Yadif:                  1 -&gt; 1, offset of one frame
 *   IVTC:                   1 -&gt; 1 or 0 (depends on whether a drop was needed)
 *                                with an offset of one frame (in most cases)
 *                                and framerate conversion.
 *
 * @param p_filter The filter instance.
 * @param p_pic The latest input picture.
 * @return Deinterlaced picture(s). Linked list of picture_t&apos;s or NULL.
 * @see Open()
 * @see filter_t
 * @see filter_sys_t
 */</doc>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='925' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='940' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='1131' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='1140' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='1173' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='1286' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='95' macro='1' c='vlc_entry__2_2_0b'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='183' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='200' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='220' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='222' macro='1' u='r'/>
<def f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='278' type='picture_t * Deinterlace(filter_t * p_filter, picture_t * p_pic)'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='402' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='420' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='615' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='718' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='723' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='732' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='737' macro='1' u='r'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='759' u='r' c='Open'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='763' macro='1' u='r'/>
<doc f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='277'>/* This is the filter function. See Open(). */</doc>
