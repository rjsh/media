<dec f='ffmpeg/libavutil/mem.h' l='403' type='void av_fast_malloc(void * ptr, unsigned int * size, size_t min_size)'/>
<doc f='ffmpeg/libavutil/mem.h' l='374'>/**
 * Allocate a buffer, reusing the given one if large enough.
 *
 * Contrary to av_fast_realloc(), the current buffer contents might not be
 * preserved and on error the old buffer is freed, thus no special handling to
 * avoid memleaks is necessary.
 *
 * `*ptr` is allowed to be `NULL`, in which case allocation always happens if
 * `size_needed` is greater than 0.
 *
 * @code{.c}
 * uint8_t *buf = ...;
 * av_fast_malloc(&amp;buf, &amp;current_size, size_needed);
 * if (!buf) {
 *     // Allocation failed; buf already freed
 *     return AVERROR(ENOMEM);
 * }
 * @endcode
 *
 * @param[in,out] ptr      Pointer to pointer to an already allocated buffer.
 *                         `*ptr` will be overwritten with pointer to new
 *                         buffer on success or `NULL` on failure
 * @param[in,out] size     Pointer to current size of buffer `*ptr`. `*size` is
 *                         changed to `min_size` in case of success or 0 in
 *                         case of failure
 * @param[in]     min_size New size of buffer `*ptr`
 * @see av_realloc()
 * @see av_fast_mallocz()
 */</doc>
<use f='ffmpeg/libavfilter/vf_deshake.c' l='248' u='c' c='find_motion'/>
<use f='ffmpeg/libavcodec/apedec.c' l='1496' u='c' c='ape_decode_frame'/>
<use f='ffmpeg/libavcodec/dca_core.c' l='2084' u='c' c='ff_dca_core_filter_fixed'/>
<use f='ffmpeg/libavcodec/dca_core.c' l='2292' u='c' c='filter_frame_float'/>
<use f='ffmpeg/libavcodec/dca_xll.c' l='394' u='c' c='chs_alloc_msb_band_data'/>
<use f='ffmpeg/libavcodec/dca_xll.c' l='422' u='c' c='chs_alloc_lsb_band_data'/>
<use f='ffmpeg/libavcodec/dca_xll.c' l='737' u='c' c='chs_assemble_freq_bands'/>
<use f='ffmpeg/libavcodec/dca_xll.c' l='964' u='c' c='parse_navi_table'/>
<use f='ffmpeg/libavcodec/fic.c' l='361' u='c' c='fic_decode_frame'/>
<use f='ffmpeg/libavcodec/flacdec.c' l='146' u='c' c='allocate_buffers'/>
<use f='ffmpeg/libavcodec/flacenc.c' l='1330' u='c' c='update_md5_sum'/>
<use f='ffmpeg/libavcodec/flashsv2enc.c' l='822' u='c' c='reconfigure_at_keyframe'/>
<use f='ffmpeg/libavcodec/gifdec.c' l='225' u='c' c='gif_read_image'/>
<use f='ffmpeg/libavcodec/gifdec.c' l='493' u='c' c='gif_decode_frame'/>
<use f='ffmpeg/libavcodec/h264_slice.c' l='133' u='c' c='alloc_scratch_buffers'/>
<use f='ffmpeg/libavcodec/h264_slice.c' l='136' u='c' c='alloc_scratch_buffers'/>
<use f='ffmpeg/libavcodec/lagarith.c' l='616' u='c' c='lag_decode_frame'/>
<use f='ffmpeg/libavcodec/magicyuv.c' l='339' u='c' c='magy_decode_frame'/>
<use f='ffmpeg/libavcodec/mjpegdec.c' l='966' u='c' c='ljpeg_decode_rgb_scan'/>
<use f='ffmpeg/libavcodec/mpegvideo.c' l='586' u='c' c='ff_mpeg_update_thread_context'/>
<use f='ffmpeg/libavcodec/nuv.c' l='138' u='c' c='codec_reinit'/>
<use f='ffmpeg/libavcodec/opusdec.c' l='395' u='c' c='opus_decode_subpacket'/>
<use f='ffmpeg/libavcodec/rscc.c' l='159' u='c' c='rscc_decode_frame'/>
<use f='ffmpeg/libavcodec/sanm.c' l='1299' u='c' c='decode_8'/>
<use f='ffmpeg/libavcodec/svq3.c' l='1051' u='c' c='svq3_decode_slice_header'/>
<use f='ffmpeg/libavcodec/takdec.c' l='754' u='c' c='tak_decode_frame'/>
<use f='ffmpeg/libavcodec/truemotion1.c' l='421' u='c' c='truemotion1_decode_header'/>
<use f='ffmpeg/libavcodec/truemotion1.c' l='491' u='c' c='truemotion1_decode_init'/>
<use f='ffmpeg/libavcodec/utvideodec.c' l='591' u='c' c='decode_frame'/>
<use f='ffmpeg/libavcodec/ylc.c' l='309' u='c' c='decode_frame'/>
<use f='ffmpeg/libavcodec/ylc.c' l='342' u='c' c='decode_frame'/>
<use f='ffmpeg/libavformat/hls.c' l='1213' u='c' c='update_init_section'/>
<use f='ffmpeg/libavformat/id3v2.c' l='959' u='c' c='id3v2_parse'/>
<use f='ffmpeg/libavformat/id3v2.c' l='991' u='c' c='id3v2_parse'/>
<use f='ffmpeg/libavformat/pmpdec.c' l='150' u='c' c='pmp_packet'/>
<use f='ffmpeg/libavformat/spdifenc.c' l='230' u='c' c='spdif_header_dts4'/>
<use f='ffmpeg/libavformat/spdifenc.c' l='529' u='c' c='spdif_write_packet'/>
<def f='ffmpeg/libavutil/mem.c' l='499' type='void av_fast_malloc(void * ptr, unsigned int * size, size_t min_size)'/>
<dec f='include/libavcodec/avcodec.h' l='4531' type='void av_fast_malloc(void * ptr, unsigned int * size, size_t min_size)'/>
<doc f='include/libavcodec/avcodec.h' l='4519'>/**
 * Allocate a buffer, reusing the given one if large enough.
 *
 * Contrary to av_fast_realloc the current buffer contents might not be
 * preserved and on error the old buffer is freed, thus no special
 * handling to avoid memleaks is necessary.
 *
 * @param ptr pointer to pointer to already allocated buffer, overwritten with pointer to new buffer
 * @param size size of the buffer *ptr points to
 * @param min_size minimum size of *ptr buffer after returning, *ptr will be NULL and
 *                 *size 0 if an error occurred.
 */</doc>
