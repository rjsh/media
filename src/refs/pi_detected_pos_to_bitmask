<def f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='123' type='const int [9]'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='692' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='704' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='705' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='709' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='710' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='714' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='715' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='719' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='720' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='780' u='r' c='IVTCCadenceDetectAlgoVektor'/>
<doc f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='106'>/**
 * For the &quot;vektor&quot; cadence detector algorithm.
 *
 * The algorithm produces a set of possible positions instead of a unique
 * position, until it locks on. The set is represented as a bitmask.
 *
 * The bitmask is stored in a word, and its layout is:
 * blank blank BFF_CARRY BFF4 BFF3 BFF2 BFF1 BFF0   (high byte)
 * blank blank TFF_CARRY TFF4 TFF3 TFF2 TFF1 TFF0   (low byte)
 *
 * This allows predicting the next position by left-shifting the previous
 * result by one bit, copying the CARRY bits to the respective zeroth position,
 * and ANDing with 0x1F1F.
 *
 * This table is indexed with a valid ivtc_cadence_pos.
 * @see ivtc_cadence_pos
 */</doc>
<doc f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='123'>/* prog. */</doc>
