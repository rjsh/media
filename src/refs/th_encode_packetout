<dec f='include/theora/theoraenc.h' l='473' type='int th_encode_packetout(th_enc_ctx * _enc, int _last, ogg_packet * _op)'/>
<use f='ffmpeg/libavcodec/libtheoraenc.c' l='283' u='c' c='encode_frame'/>
<use f='ffmpeg/libavcodec/libtheoraenc.c' l='326' u='c' c='encode_frame'/>
<doc f='include/theora/theoraenc.h' l='450'>/**Retrieves encoded video data packets.
 * This should be called repeatedly after each frame is submitted to flush any
 *  encoded packets, until it returns 0.
 * The encoder will not buffer these packets as subsequent frames are
 *  compressed, so a failure to do so will result in lost video data.
 * \note Currently the encoder operates in a one-frame-in, one-packet-out
 *        manner.
 *       However, this may be changed in the future.
 * \param _enc  A #th_enc_ctx handle.
 * \param _last Set this flag to a non-zero value if no more uncompressed
 *               frames will be submitted.
 *              This ensures that a proper EOS flag is set on the last packet.
 * \param _op   An &lt;tt&gt;ogg_packet&lt;/tt&gt; structure to fill.
 *              All of the elements of this structure will be set, including a
 *               pointer to the video data.
 *              The memory for the video data is owned by
 *               &lt;tt&gt;libtheoraenc&lt;/tt&gt;, and may be invalidated when the next
 *               encoder function is called.
 * \return A positive value indicates that a video data packet was successfully
 *          produced.
 * \retval 0         No packet was produced, and no more encoded video data
 *                    remains.
 * \retval TH_EFAULT \a _enc or \a _op was &lt;tt&gt;NULL&lt;/tt&gt;.*/</doc>
<use f='vlc/modules/codec/theora.c' l='867' u='c' c='Encode'/>
