<dec f='ffmpeg/libswresample/swresample.h' l='467' type='int64_t swr_get_delay(struct SwrContext * s, int64_t base)'/>
<use f='ffmpeg/libavfilter/af_aresample.c' l='192' u='c' c='filter_frame'/>
<doc f='ffmpeg/libswresample/swresample.h' l='443'>/**
 * Gets the delay the next input sample will experience relative to the next output sample.
 *
 * Swresample can buffer data if more input has been provided than available
 * output space, also converting between sample rates needs a delay.
 * This function returns the sum of all such delays.
 * The exact delay is not necessarily an integer value in either input or
 * output sample rate. Especially when downsampling by a large value, the
 * output sample rate may be a poor choice to represent the delay, similarly
 * for upsampling and the input sample rate.
 *
 * @param s     swr context
 * @param base  timebase in which the returned delay will be:
 *              @li if it&apos;s set to 1 the returned delay is in seconds
 *              @li if it&apos;s set to 1000 the returned delay is in milliseconds
 *              @li if it&apos;s set to the input sample rate then the returned
 *                  delay is in input samples
 *              @li if it&apos;s set to the output sample rate then the returned
 *                  delay is in output samples
 *              @li if it&apos;s the least common multiple of in_sample_rate and
 *                  out_sample_rate then an exact rounding-free delay will be
 *                  returned
 * @returns     the delay in 1 / @c base units.
 */</doc>
<def f='ffmpeg/libswresample/swresample.c' l='860' type='int64_t swr_get_delay(struct SwrContext * s, int64_t base)'/>
<use f='ffmpeg/libswresample/swresample.c' l='918' u='c' c='swr_next_pts'/>
<use f='ffmpeg/libswresample/swresample.c' l='920' u='c' c='swr_next_pts'/>
<use f='ffmpeg/libswresample/swresample_frame.c' l='142' u='c' c='swr_convert_frame'/>
