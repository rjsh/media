<dec f='vlc/modules/video_filter/deinterlace/helpers.h' l='97' type='void ComposeFrame(filter_t * p_filter, picture_t * p_outpic, picture_t * p_inpic_top, picture_t * p_inpic_bottom, compose_chroma_t i_output_chroma, _Bool swapped_uv_conversion)'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='1441' u='c' c='IVTCOutputOrDropFrame'/>
<use f='vlc/modules/video_filter/deinterlace/algo_ivtc.c' l='1443' u='c' c='IVTCOutputOrDropFrame'/>
<doc f='vlc/modules/video_filter/deinterlace/helpers.h' l='45'>/**
 * Helper function: composes a frame from the given field pair.
 *
 * Caller must manage allocation/deallocation of p_outpic.
 *
 * The inputs are full pictures (frames); only one field
 * will be used from each.
 *
 * Chroma formats of the inputs must match. It is also desirable that the
 * visible pitches of both inputs are the same, so that this will do something
 * sensible. The pitch or visible pitch of the output does not need to match
 * with the input; the compatible (smaller) part of the visible pitch will
 * be filled.
 *
 * The i_output_chroma parameter must always be supplied, but it is only used
 * when the chroma format of the input is detected as 4:2:0. Available modes:
 *   - CC_ALTLINE:       Alternate line copy, like for luma. Chroma line 0
 *                       comes from top field picture, chroma line 1 comes
 *                       from bottom field picture, chroma line 2 from top
 *                       field picture, and so on. This is usually the right
 *                       choice for IVTCing NTSC DVD material, but rarely
 *                       for any other use cases.
 *   - CC_UPCONVERT:     The output will have 4:2:2 chroma. All 4:2:0 chroma
 *                       data from both input fields will be used to generate
 *                       the 4:2:2 chroma data of the output. Each output line
 *                       will thus have independent chroma. This is a good
 *                       choice for most purposes except IVTC, if the machine
 *                       can handle the increased throughput. (Make sure to
 *                       allocate a 4:2:2 output picture first!)
 *                       This mode can also be used for converting a 4:2:0
 *                       frame to 4:2:2 format (by passing the same input
 *                       picture for both input fields).
 *                       Conversions: I420, YV12 --&gt; I422
 *                                    J420       --&gt; J422
 *   - CC_SOURCE_TOP:    Copy chroma of source top field picture.
 *                       Ignore chroma of source bottom field picture.
 *   - CC_SOURCE_BOTTOM: Copy chroma of source bottom field picture.
 *                       Ignore chroma of source top field picture.
 *   - CC_MERGE:         Average the chroma of the input field pictures.
 *                       (Note that this has no effect if the input fields
 *                        come from the same frame.)
 *
 * @param p_filter The filter instance (determines input chroma).
 * @param p_outpic Composed picture is written here. Allocated by caller.
 * @param p_inpic_top Picture to extract the top field from.
 * @param p_inpic_bottom Picture to extract the bottom field from.
 * @param i_output_chroma Chroma operation mode for 4:2:0 (see function doc)
 * @param swapped_uv_conversion Swap UV while up converting (for YV12)
 * @see compose_chroma_t
 * @see RenderPhosphor()
 * @see RenderIVTC()
 */</doc>
<use f='vlc/modules/video_filter/deinterlace/algo_phosphor.c' l='343' u='c' c='RenderPhosphor'/>
<def f='vlc/modules/video_filter/deinterlace/helpers.c' l='255' type='void ComposeFrame(filter_t * p_filter, picture_t * p_outpic, picture_t * p_inpic_top, picture_t * p_inpic_bottom, compose_chroma_t i_output_chroma, _Bool swapped_uv_conversion)'/>
<doc f='vlc/modules/video_filter/deinterlace/helpers.c' l='254'>/* See header for function doc. */</doc>
