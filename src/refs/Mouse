<dec f='vlc/modules/video_filter/deinterlace/deinterlace.h' l='232' type='int Mouse(filter_t * p_filter, vlc_mouse_t * p_mouse, const vlc_mouse_t * p_old, const vlc_mouse_t * p_new)'/>
<doc f='vlc/modules/video_filter/deinterlace/deinterlace.h' l='213'>/**
 * Mouse callback for the deinterlace filter.
 *
 * Open() sets this up as the mouse callback method (pf_video_mouse)
 * in the filter structure.
 *
 * Currently, this handles the scaling of the y coordinate for algorithms
 * that halve the output height.
 *
 * @param p_filter The filter instance.
 * @param[out] p_mouse Updated mouse position data.
 * @param[in] p_old Previous mouse position data. Unused in this filter.
 * @param[in] p_new Latest mouse position data.
 * @return VLC error code; currently always VLC_SUCCESS.
 * @retval VLC_SUCCESS All ok.
 * @see Open()
 * @see filter_t
 * @see vlc_mouse_t
 */</doc>
<def f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='589' type='int Mouse(filter_t * p_filter, vlc_mouse_t * p_mouse, const vlc_mouse_t * p_old, const vlc_mouse_t * p_new)'/>
<use f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='761' u='r' c='Open'/>
<doc f='vlc/modules/video_filter/deinterlace/deinterlace.c' l='585'>/*****************************************************************************
 * Mouse event callback
 *****************************************************************************/</doc>
