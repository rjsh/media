<dec f='ffmpeg/libavformat/rtsp.h' l='544' type='int ff_rtsp_read_reply(AVFormatContext * s, RTSPMessageHeader * reply, unsigned char ** content_ptr, int return_on_interleaved_data, const char * method)'/>
<doc f='ffmpeg/libavformat/rtsp.h' l='521'>/**
 * Read a RTSP message from the server, or prepare to read data
 * packets if we&apos;re reading data interleaved over the TCP/RTSP
 * connection as well.
 *
 * @param s RTSP (de)muxer context
 * @param reply pointer where the RTSP message header will be stored
 * @param content_ptr pointer where the RTSP message body, if any, will
 *                    be stored (length is in reply)
 * @param return_on_interleaved_data whether the function may return if we
 *                   encounter a data marker (&apos;$&apos;), which precedes data
 *                   packets over interleaved TCP/RTSP connections. If this
 *                   is set, this function will return 1 after encountering
 *                   a &apos;$&apos;. If it is not set, the function will skip any
 *                   data packets (if they are encountered), until a reply
 *                   has been fully parsed. If no more data is available
 *                   without parsing a reply, it will return an error.
 * @param method the RTSP method this is a reply to. This affects how
 *               some response headers are acted upon. May be NULL.
 *
 * @return 1 if a data packets is ready to be received, -1 on error,
 *          and 0 on success.
 */</doc>
<def f='ffmpeg/libavformat/rtsp.c' l='1146' type='int ff_rtsp_read_reply(AVFormatContext * s, RTSPMessageHeader * reply, unsigned char ** content_ptr, int return_on_interleaved_data, const char * method)'/>
<use f='ffmpeg/libavformat/rtsp.c' l='1387' u='c' c='ff_rtsp_send_cmd_with_content'/>
<use f='ffmpeg/libavformat/rtsp.c' l='1998' u='c' c='udp_read_packet'/>
<use f='ffmpeg/libavformat/rtspdec.c' l='764' u='c' c='ff_rtsp_tcp_read_packet'/>
<use f='ffmpeg/libavformat/rtspenc.c' l='199' u='c' c='rtsp_write_packet'/>
