<dec f='ffmpeg/libavutil/tree.h' l='67' type='void * av_tree_find(const struct AVTreeNode * root, void * key, int (*)(const void *, const void *) cmp, void ** next)'/>
<use f='ffmpeg/libavfilter/vf_drawtext.c' l='1094' u='c' c='draw_glyphs'/>
<use f='ffmpeg/libavfilter/vf_drawtext.c' l='1225' u='c' c='draw_text'/>
<use f='ffmpeg/libavfilter/vf_drawtext.c' l='1261' u='c' c='draw_text'/>
<doc f='ffmpeg/libavutil/tree.h' l='53'>/**
 * Find an element.
 * @param root a pointer to the root node of the tree
 * @param next If next is not NULL, then next[0] will contain the previous
 *             element and next[1] the next element. If either does not exist,
 *             then the corresponding entry in next is unchanged.
 * @param cmp compare function used to compare elements in the tree,
 *            API identical to that of Standard C&apos;s qsort
 *            It is guaranteed that the first and only the first argument to cmp()
 *            will be the key parameter to av_tree_find(), thus it could if the
 *            user wants, be a different type (like an opaque context).
 * @return An element with cmp(key, elem) == 0 or NULL if no such element
 *         exists in the tree.
 */</doc>
<use f='ffmpeg/libavformat/cache.c' l='119' u='c' c='add_entry'/>
<use f='ffmpeg/libavformat/cache.c' l='162' u='c' c='cache_read'/>
<use f='ffmpeg/libavformat/nutdec.c' l='1282' u='c' c='read_seek'/>
<use f='ffmpeg/libavformat/nutdec.c' l='1297' u='c' c='read_seek'/>
<use f='ffmpeg/libavformat/nutdec.c' l='1308' u='c' c='read_seek'/>
<use f='ffmpeg/libavformat/nutenc.c' l='600' u='c' c='write_index'/>
<def f='ffmpeg/libavutil/tree.c' l='39' type='void * av_tree_find(const AVTreeNode * t, void * key, int (*)(const void *, const void *) cmp, void ** next)'/>
<use f='ffmpeg/libavutil/tree.c' l='47' u='c' c='av_tree_find'/>
<use f='ffmpeg/libavutil/tree.c' l='50' u='c' c='av_tree_find'/>
<use f='ffmpeg/libavutil/tree.c' l='51' u='c' c='av_tree_find'/>
<use f='ffmpeg/libavutil/tree.c' l='72' u='c' c='av_tree_insert'/>
