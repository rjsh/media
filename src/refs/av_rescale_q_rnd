<dec f='ffmpeg/libavutil/mathematics.h' l='160' type='int64_t av_rescale_q_rnd(int64_t a, AVRational bq, AVRational cq, enum AVRounding rnd)'/>
<doc f='ffmpeg/libavutil/mathematics.h' l='153'>/**
 * Rescale a 64-bit integer by 2 rational numbers with specified rounding.
 *
 * The operation is mathematically equivalent to `a * bq / cq`.
 *
 * @see av_rescale(), av_rescale_rnd(), av_rescale_q()
 */</doc>
<use f='ffmpeg/libavdevice/lavfi.c' l='418' u='c' c='lavfi_read_packet'/>
<use f='ffmpeg/libavfilter/src_movie.c' l='561' u='c' c='movie_push_frame'/>
<use f='ffmpeg/libavfilter/src_movie.c' l='567' u='c' c='movie_push_frame'/>
<use f='ffmpeg/ffmpeg.c' l='4166' u='c' c='process_input'/>
<use f='ffmpeg/ffmpeg.c' l='4194' u='c' c='process_input'/>
<use f='ffmpeg/libavfilter/vf_fps.c' l='210' u='c' c='filter_frame'/>
<use f='ffmpeg/libavformat/concatdec.c' l='667' u='c' c='rescale_interval'/>
<use f='ffmpeg/libavformat/concatdec.c' l='669' u='c' c='rescale_interval'/>
<use f='ffmpeg/libavformat/mux.c' l='724' u='c' c='write_packet'/>
<use f='ffmpeg/libavformat/mux.c' l='998' u='c' c='ff_interleave_add_packet'/>
<use f='ffmpeg/libavformat/rmenc.c' l='105' u='c' c='rv10_write_header'/>
<use f='ffmpeg/libavformat/rmenc.c' l='181' u='c' c='rv10_write_header'/>
<use f='ffmpeg/libavformat/rmenc.c' l='304' u='c' c='write_packet_header'/>
<use f='ffmpeg/libavformat/utils.c' l='1418' u='c' c='parse_packet'/>
<use f='ffmpeg/libavformat/utils.c' l='2548' u='c' c='update_stream_timings'/>
<def f='ffmpeg/libavutil/mathematics.c' l='134' type='int64_t av_rescale_q_rnd(int64_t a, AVRational bq, AVRational cq, enum AVRounding rnd)'/>
<use f='ffmpeg/libavutil/mathematics.c' l='144' u='c' c='av_rescale_q'/>
<use f='ffmpeg/libavutil/mathematics.c' l='180' u='c' c='av_rescale_delta'/>
<use f='ffmpeg/libavutil/mathematics.c' l='181' u='c' c='av_rescale_delta'/>
