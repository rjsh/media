<dec f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='1871' type='NVENCSTATUS NvEncGetEncodeProfileGUIDs(void * encoder, GUID encodeGUID, GUID * profileGUIDs, uint32_t guidArraySize, uint32_t * GUIDCount)'/>
<doc f='ffmpeg/compat/nvenc/nvEncodeAPI.h' l='1838'>/**
 * \brief Retrieves an array of supported encode profile GUIDs.
 *
 * The function returns an array of supported profile guids for a particular
 * codec guid. The client must allocate an array where the NvEncodeAPI interface
 * can populate the profile guids. The client can determine the array size using
 * ::NvEncGetEncodeProfileGUIDCount() API. The client must also validiate that the
 * NvEncodeAPI interface supports the GUID the client wants to pass as \p encodeGUID
 * parameter.
 *
 * \param [in] encoder
 *   Pointer to the NvEncodeAPI interface.
 * \param [in] encodeGUID
 *   The encode guid whose profile guids are being enumerated.
 * \param [in] guidArraySize
 *   Number of GUIDs to be retrieved. Should be set to the number retrieved using
 *   ::NvEncGetEncodeProfileGUIDCount.
 * \param [out] profileGUIDs
 *   Array of supported Encode Profile GUIDs
 * \param [out] GUIDCount
 *   Number of valid encode profile GUIDs in \p profileGUIDs array.
 *
 * \return
 * ::NV_ENC_SUCCESS \n
 * ::NV_ENC_ERR_INVALID_PTR \n
 * ::NV_ENC_ERR_INVALID_ENCODERDEVICE \n
 * ::NV_ENC_ERR_DEVICE_NOT_EXIST \n
 * ::NV_ENC_ERR_UNSUPPORTED_PARAM \n
 * ::NV_ENC_ERR_OUT_OF_MEMORY \n
 * ::NV_ENC_ERR_INVALID_PARAM \n
 * ::NV_ENC_ERR_GENERIC \n
 *
 */</doc>
