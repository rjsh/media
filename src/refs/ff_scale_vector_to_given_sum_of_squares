<dec f='ffmpeg/libavcodec/acelp_vectors.h' l='266' type='void ff_scale_vector_to_given_sum_of_squares(float * out, const float * in, float sum_of_squares, const int n)'/>
<def f='ffmpeg/libavcodec/acelp_vectors.c' l='224' type='void ff_scale_vector_to_given_sum_of_squares(float * out, const float * in, float sum_of_squares, const int n)'/>
<doc f='ffmpeg/libavcodec/acelp_vectors.h' l='251'>/**
 * Set the sum of squares of a signal by scaling
 *
 * @param out output samples
 * @param in input samples
 * @param sum_of_squares new sum of squares
 * @param n number of samples
 *
 * @note If the input is zero (or its energy underflows), the output is zero.
 *       This is the behavior of AGC in the AMR reference decoder. The QCELP
 *       reference decoder seems to have undefined behavior.
 *
 * TIA/EIA/IS-733 2.4.8.3-2/3/4/5, 2.4.8.6
 * 3GPP TS 26.090 6.1 (6)
 */</doc>
<use f='ffmpeg/libavcodec/amrnbdec.c' l='819' u='c' c='synthesis'/>
<use f='ffmpeg/libavcodec/amrwbdec.c' l='790' u='c' c='synthesis'/>
<use f='ffmpeg/libavcodec/amrwbdec.c' l='896' u='c' c='scaled_hb_excitation'/>
<use f='ffmpeg/libavcodec/qcelpdec.c' l='402' u='c' c='apply_gain_ctrl'/>
