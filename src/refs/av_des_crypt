<dec f='ffmpeg/libavutil/des.h' l='62' type='void av_des_crypt(struct AVDES * d, uint8_t * dst, const uint8_t * src, int count, uint8_t * iv, int decrypt)'/>
<use f='ffmpeg/libavformat/asfcrypt.c' l='178' u='c' c='ff_asfcrypt_dec'/>
<doc f='ffmpeg/libavutil/des.h' l='52'>/**
 * @brief Encrypts / decrypts using the DES algorithm.
 *
 * @param count number of 8 byte blocks
 * @param dst destination array, can be equal to src, must be 8-byte aligned
 * @param src source array, can be equal to dst, must be 8-byte aligned, may be NULL
 * @param iv initialization vector for CBC mode, if NULL then ECB will be used,
 *           must be 8-byte aligned
 * @param decrypt 0 for encryption, 1 for decryption
 */</doc>
<use f='ffmpeg/libavformat/omadec.c' l='141' u='c' c='rprobe'/>
<use f='ffmpeg/libavformat/omadec.c' l='145' u='c' c='rprobe'/>
<use f='ffmpeg/libavformat/omadec.c' l='195' u='c' c='nprobe'/>
<use f='ffmpeg/libavformat/omadec.c' l='295' u='c' c='decrypt_init'/>
<use f='ffmpeg/libavformat/omadec.c' l='460' u='c' c='oma_read_packet'/>
<def f='ffmpeg/libavutil/des.c' l='322' type='void av_des_crypt(AVDES * d, uint8_t * dst, const uint8_t * src, int count, uint8_t * iv, int decrypt)'/>
