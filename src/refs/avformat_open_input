<dec f='ffmpeg/libavformat/avformat.h' l='2191' type='int avformat_open_input(AVFormatContext ** ps, const char * url, AVInputFormat * fmt, AVDictionary ** options)'/>
<doc f='ffmpeg/libavformat/avformat.h' l='2172'>/**
 * Open an input stream and read the header. The codecs are not opened.
 * The stream must be closed with avformat_close_input().
 *
 * @param ps Pointer to user-supplied AVFormatContext (allocated by avformat_alloc_context).
 *           May be a pointer to NULL, in which case an AVFormatContext is allocated by this
 *           function and written into ps.
 *           Note that a user-supplied AVFormatContext will be freed on failure.
 * @param url URL of the stream to open.
 * @param fmt If non-NULL, this parameter forces a specific input format.
 *            Otherwise the format is autodetected.
 * @param options  A dictionary filled with AVFormatContext and demuxer-private options.
 *                 On return this parameter will be destroyed and replaced with a dict containing
 *                 options that were not found. May be NULL.
 *
 * @return 0 on success, a negative AVERROR on failure.
 *
 * @note If you want to use custom IO, preallocate the format context and set its pb field.
 */</doc>
<use f='ffmpeg/libavfilter/lavfutils.c' l='42' u='c' c='ff_load_image'/>
<use f='ffmpeg/libavfilter/src_movie.c' l='244' u='c' c='movie_common_init'/>
<use f='ffmpeg/ffmpeg_opt.c' l='997' u='c' c='open_input_file'/>
<use f='ffmpeg/ffmpeg_opt.c' l='1912' u='c' c='read_ffserver_streams'/>
<use f='ffmpeg/ffprobe.c' l='2558' u='c' c='open_input_file'/>
<use f='ffmpeg/ffserver.c' l='2188' u='c' c='open_input_stream'/>
<use f='ffmpeg/ffserver.c' l='2804' u='c' c='http_receive_data'/>
<use f='ffmpeg/ffserver.c' l='3689' u='c' c='build_file_streams'/>
<use f='ffmpeg/ffserver.c' l='3782' u='c' c='build_feed_streams'/>
<use f='ffmpeg/libavfilter/vf_subtitles.c' l='320' u='c' c='init_subtitles'/>
<use f='ffmpeg/libavformat/avidec.c' l='1109' u='c' c='read_gab2_sub'/>
<use f='ffmpeg/libavformat/concatdec.c' l='330' u='c' c='open_file'/>
<use f='ffmpeg/libavformat/hls.c' l='1739' u='c' c='hls_read_header'/>
<use f='ffmpeg/libavformat/mpeg.c' l='738' u='c' c='vobsub_read_header'/>
<use f='ffmpeg/libavformat/rdt.c' l='537' u='c' c='rdt_init'/>
<use f='ffmpeg/libavformat/rtpdec_asf.c' l='139' u='c' c='ff_wms_parse_sdp_a_line'/>
<use f='ffmpeg/libavformat/sapdec.c' l='167' u='c' c='sap_read_header'/>
<def f='ffmpeg/libavformat/utils.c' l='503' type='int avformat_open_input(AVFormatContext ** ps, const char * filename, AVInputFormat * fmt, AVDictionary ** options)'/>
<dec f='include/libavformat/avformat.h' l='1234' type='int avformat_open_input(AVFormatContext ** ps, const char * filename, AVInputFormat * fmt, AVDictionary ** options)'/>
<doc f='include/libavformat/avformat.h' l='1215'>/**
 * Open an input stream and read the header. The codecs are not opened.
 * The stream must be closed with av_close_input_file().
 *
 * @param ps Pointer to user-supplied AVFormatContext (allocated by avformat_alloc_context).
 *           May be a pointer to NULL, in which case an AVFormatContext is allocated by this
 *           function and written into ps.
 *           Note that a user-supplied AVFormatContext will be freed on failure.
 * @param filename Name of the stream to open.
 * @param fmt If non-NULL, this parameter forces a specific input format.
 *            Otherwise the format is autodetected.
 * @param options  A dictionary filled with AVFormatContext and demuxer-private options.
 *                 On return this parameter will be destroyed and replaced with a dict containing
 *                 options that were not found. May be NULL.
 *
 * @return 0 on success, a negative AVERROR on failure.
 *
 * @note If you want to use custom IO, preallocate the format context and set its pb field.
 */</doc>
<use f='vlc/modules/demux/avformat/demux.c' l='276' u='c' c='OpenDemux'/>
