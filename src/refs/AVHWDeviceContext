<def f='ffmpeg/libavutil/hwcontext.h' l='54'/>
<size>48</size>
<doc f='ffmpeg/libavutil/hwcontext.h' l='37'>/**
 * This struct aggregates all the (hardware/vendor-specific) &quot;high-level&quot; state,
 * i.e. state that is not tied to a concrete processing configuration.
 * E.g., in an API that supports hardware-accelerated encoding and decoding,
 * this struct will (if possible) wrap the state that is common to both encoding
 * and decoding and from which specific instances of encoders or decoders can be
 * derived.
 *
 * This struct is reference-counted with the AVBuffer mechanism. The
 * av_hwdevice_ctx_alloc() constructor yields a reference, whose data field
 * points to the actual AVHWDeviceContext. Further objects derived from
 * AVHWDeviceContext (such as AVHWFramesContext, describing a frame pool with
 * specific properties) will hold an internal reference to it. After all the
 * references are released, the AVHWDeviceContext itself will be freed,
 * optionally invoking a user-specified callback for uninitializing the hardware
 * state.
 */</doc>
<mbr r='AVHWDeviceContext::av_class' o='0' t='const AVClass *'/>
<mbr r='AVHWDeviceContext::internal' o='64' t='AVHWDeviceInternal *'/>
<mbr r='AVHWDeviceContext::type' o='128' t='enum AVHWDeviceType'/>
<mbr r='AVHWDeviceContext::hwctx' o='192' t='void *'/>
<mbr r='AVHWDeviceContext::free' o='256' t='void (*)(struct AVHWDeviceContext *)'/>
<mbr r='AVHWDeviceContext::user_opaque' o='320' t='void *'/>
