<dec f='ffmpeg/libavformat/avformat.h' l='2407' type='int avformat_write_header(AVFormatContext * s, AVDictionary ** options)'/>
<use f='ffmpeg/ffmpeg.c' l='2771' u='c' c='check_init_output_file'/>
<use f='ffmpeg/ffserver.c' l='2310' u='c' c='http_prepare_data'/>
<use f='ffmpeg/ffserver.c' l='3495' u='c' c='rtp_new_av_stream'/>
<use f='ffmpeg/ffserver.c' l='3863' u='c' c='build_feed_streams'/>
<use f='ffmpeg/libavformat/dashenc.c' l='694' u='c' c='dash_write_header'/>
<use f='ffmpeg/libavformat/fifo.c' l='135' u='c' c='fifo_thread_write_header'/>
<use f='ffmpeg/libavformat/hdsenc.c' l='406' u='c' c='hds_write_header'/>
<use f='ffmpeg/libavformat/hlsenc.c' l='749' u='c' c='hls_start'/>
<use f='ffmpeg/libavformat/hlsenc.c' l='897' u='c' c='hls_write_header'/>
<use f='ffmpeg/libavformat/img2enc.c' l='165' u='c' c='write_packet'/>
<use f='ffmpeg/libavformat/mpegtsenc.c' l='915' u='c' c='mpegts_init'/>
<def f='ffmpeg/libavformat/mux.c' l='527' type='int avformat_write_header(AVFormatContext * s, AVDictionary ** options)'/>
<use f='ffmpeg/libavformat/rtpenc_chain.c' l='87' u='c' c='ff_rtp_chain_mux_open'/>
<use f='ffmpeg/libavformat/rtpenc_mpegts.c' l='73' u='c' c='rtp_mpegts_write_header'/>
<use f='ffmpeg/libavformat/rtpenc_mpegts.c' l='92' u='c' c='rtp_mpegts_write_header'/>
<use f='ffmpeg/libavformat/segment.c' l='265' u='c' c='segment_start'/>
<use f='ffmpeg/libavformat/segment.c' l='779' u='c' c='seg_init'/>
<use f='ffmpeg/libavformat/segment.c' l='804' u='c' c='seg_write_header'/>
<use f='ffmpeg/libavformat/smoothstreamingenc.c' l='359' u='c' c='ism_write_header'/>
<use f='ffmpeg/libavformat/tee.c' l='226' u='c' c='open_slave'/>
<dec f='include/libavformat/avformat.h' l='1433' type='int avformat_write_header(AVFormatContext * s, AVDictionary ** options)'/>
<doc f='include/libavformat/avformat.h' l='1418'>/**
 * Allocate the stream private data and write the stream header to
 * an output media file.
 *
 * @param s Media file handle, must be allocated with avformat_alloc_context().
 *          Its oformat field must be set to the desired output format;
 *          Its pb field must be set to an already openened AVIOContext.
 * @param options  An AVDictionary filled with AVFormatContext and muxer-private options.
 *                 On return this parameter will be destroyed and replaced with a dict containing
 *                 options that were not found. May be NULL.
 *
 * @return 0 on success, negative AVERROR on failure.
 *
 * @see av_opt_find, av_dict_set, avio_open, av_oformat_next.
 */</doc>
<use f='vlc/modules/demux/avformat/mux.c' l='378' u='c' c='Mux'/>
