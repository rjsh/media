<def f='include/avahi-common/watch.h' l='60'/>
<size>64</size>
<doc f='include/avahi-common/watch.h' l='55'>/** Defines an abstracted event polling API. This may be used to
 connect Avahi to other main loops. This is loosely based on Unix
 poll(2). A consumer will call watch_new() for all file descriptors it
 wants to listen for events on. In addition he can call timeout_new()
 to define time based events .*/</doc>
<mbr r='AvahiPoll::userdata' o='0' t='void *'/>
<mbr r='AvahiPoll::watch_new' o='64' t='AvahiWatch *(*)(const AvahiPoll *, int, AvahiWatchEvent, AvahiWatchCallback, void *)'/>
<mbr r='AvahiPoll::watch_update' o='128' t='void (*)(AvahiWatch *, AvahiWatchEvent)'/>
<mbr r='AvahiPoll::watch_get_events' o='192' t='AvahiWatchEvent (*)(AvahiWatch *)'/>
<mbr r='AvahiPoll::watch_free' o='256' t='void (*)(AvahiWatch *)'/>
<mbr r='AvahiPoll::timeout_new' o='320' t='AvahiTimeout *(*)(const AvahiPoll *, const struct timeval *, AvahiTimeoutCallback, void *)'/>
<mbr r='AvahiPoll::timeout_update' o='384' t='void (*)(AvahiTimeout *, const struct timeval *)'/>
<mbr r='AvahiPoll::timeout_free' o='448' t='void (*)(AvahiTimeout *)'/>
