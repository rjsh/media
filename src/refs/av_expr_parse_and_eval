<dec f='ffmpeg/libavutil/eval.h' l='51' type='int av_expr_parse_and_eval(double * res, const char * s, const char *const * const_names, const double * const_values, const char *const * func1_names, double (*const *)(void *, double) funcs1, const char *const * func2_names, double (*const *)(void *, double, double) funcs2, void * opaque, int log_offset, void * log_ctx)'/>
<doc f='ffmpeg/libavutil/eval.h' l='33'>/**
 * Parse and evaluate an expression.
 * Note, this is significantly slower than av_expr_eval().
 *
 * @param res a pointer to a double where is put the result value of
 * the expression, or NAN in case of error
 * @param s expression as a zero terminated string, for example &quot;1+2^3+5*5+sin(2/3)&quot;
 * @param const_names NULL terminated array of zero terminated strings of constant identifiers, for example {&quot;PI&quot;, &quot;E&quot;, 0}
 * @param const_values a zero terminated array of values for the identifiers from const_names
 * @param func1_names NULL terminated array of zero terminated strings of funcs1 identifiers
 * @param funcs1 NULL terminated array of function pointers for functions which take 1 argument
 * @param func2_names NULL terminated array of zero terminated strings of funcs2 identifiers
 * @param funcs2 NULL terminated array of function pointers for functions which take 2 arguments
 * @param opaque a pointer which will be passed to all functions from funcs1 and funcs2
 * @param log_ctx parent logging context
 * @return &gt;= 0 in case of success, a negative value corresponding to an
 * AVERROR code otherwise
 */</doc>
<use f='ffmpeg/libavfilter/af_firequalizer.c' l='440' u='c' c='generate_kernel'/>
<use f='ffmpeg/libavfilter/settb.c' l='86' u='c' c='config_output_props'/>
<use f='ffmpeg/libavfilter/vf_aspect.c' l='80' u='c' c='init'/>
<use f='ffmpeg/libavfilter/vf_aspect.c' l='131' u='c' c='get_aspect_ratio'/>
<use f='ffmpeg/libavfilter/vf_boxblur.c' l='162' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_boxblur.c' l='162' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_boxblur.c' l='162' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_crop.c' l='163' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_crop.c' l='168' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_crop.c' l='174' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_drawbox.c' l='152' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_drawbox.c' l='159' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_drawbox.c' l='166' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_drawbox.c' l='173' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_drawbox.c' l='180' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_drawtext.c' l='891' u='c' c='func_eval_expr'/>
<use f='ffmpeg/libavfilter/vf_drawtext.c' l='920' u='c' c='func_eval_expr_int_format'/>
<use f='ffmpeg/libavfilter/vf_pad.c' l='116' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_pad.c' l='120' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_pad.c' l='129' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_pad.c' l='138' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_pad.c' l='142' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_pad.c' l='148' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/vf_perspective.c' l='150' u='c' c='calc_persp_luts'/>
<use f='ffmpeg/libavfilter/vf_qp.c' l='127' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_rotate.c' l='341' u='c' c='config_props'/>
<use f='ffmpeg/libavfilter/vf_rotate.c' l='328' u='c' c='config_props'/>
<use f='ffmpeg/libavfilter/vf_rotate.c' l='328' u='c' c='config_props'/>
<use f='ffmpeg/libavfilter/vf_scale.c' l='282' u='c' c='config_props'/>
<use f='ffmpeg/libavfilter/vf_scale.c' l='286' u='c' c='config_props'/>
<use f='ffmpeg/libavfilter/vf_scale.c' l='292' u='c' c='config_props'/>
<use f='ffmpeg/libavfilter/vf_swaprect.c' l='104' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_swaprect.c' l='111' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_swaprect.c' l='118' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_swaprect.c' l='125' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_swaprect.c' l='132' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_swaprect.c' l='139' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_zoompan.c' l='153' u='c' c='output_single_frame'/>
<use f='ffmpeg/libavfilter/vf_zoompan.c' l='163' u='c' c='output_single_frame'/>
<use f='ffmpeg/libavfilter/vf_zoompan.c' l='171' u='c' c='output_single_frame'/>
<use f='ffmpeg/libavfilter/vf_zoompan.c' l='254' u='c' c='filter_frame'/>
<def f='ffmpeg/libavutil/eval.c' l='723' type='int av_expr_parse_and_eval(double * d, const char * s, const char *const * const_names, const double * const_values, const char *const * func1_names, double (*const *)(void *, double) funcs1, const char *const * func2_names, double (*const *)(void *, double, double) funcs2, void * opaque, int log_offset, void * log_ctx)'/>
<use f='ffmpeg/libavutil/opt.c' l='272' u='c' c='set_string_number'/>
<use f='ffmpeg/libavutil/parseutils.c' l='53' u='c' c='av_parse_ratio'/>
