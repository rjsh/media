<inh f='include/taglib/trefcounter.h' l='75' c='TagLib::RefCounterOld'/>
<def f='include/taglib/tlist.tcc' l='43'/>
<ovr f='include/taglib/tlist.tcc' l='53' c='TagLib::List::ListPrivate'/>
<ovr f='include/taglib/tlist.tcc' l='68' c='TagLib::List::ListPrivate'/>
<size>8</size>
<doc f='include/taglib/tlist.tcc' l='31'>////////////////////////////////////////////////////////////////////////////////
// public members
////////////////////////////////////////////////////////////////////////////////

// The functionality of List&lt;T&gt;::setAutoDelete() is implemented here partial
// template specialization.  This is implemented in such a way that calling
// setAutoDelete() on non-pointer types will simply have no effect.

// A base for the generic and specialized private class types.  New
// non-templatized members should be added here.

// BIC change to RefCounter</doc>
<fun r='_ZN6TagLib15ListPrivateBaseC1Ev'/>
<mbr r='TagLib::ListPrivateBase::autoDelete' o='32' t='bool'/>
