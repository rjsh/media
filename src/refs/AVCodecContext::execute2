<dec f='ffmpeg/libavcodec/avcodec.h' l='3167' type='int (*)(struct AVCodecContext *, int (*)(struct AVCodecContext *, void *, int, int), void *, int *, int)'/>
<offset>7360</offset>
<doc f='ffmpeg/libavcodec/avcodec.h' l='3149'>/**
     * The codec may call this to execute several independent things.
     * It will return only after finishing all tasks.
     * The user may replace this with some multithreaded implementation,
     * the default implementation will execute the parts serially.
     * Also see avcodec_thread_init and e.g. the --enable-pthread configure option.
     * @param c context passed also to func
     * @param count the number of things to execute
     * @param arg2 argument passed unchanged to func
     * @param ret return values of executed functions, must have space for &quot;count&quot; values. May be NULL.
     * @param func function that will be called count times, with jobnr from 0 to count-1.
     *             threadnr will be in the range 0 to c-&gt;thread_count-1 &lt; MAX_THREADS and so that no
     *             two instances of func executing at the same time will have the same threadnr.
     * @return always 0 currently, but code should handle a future improvement where when any call to func
     *         returns &lt; 0 no further calls to func may be done and &lt; 0 is returned.
     * - encoding: Set by libavcodec, user can override.
     * - decoding: Set by libavcodec, user can override.
     */</doc>
<use f='ffmpeg/libavcodec/dds.c' l='682' u='r' c='dds_decode'/>
<use f='ffmpeg/libavcodec/diracdec.c' l='974' u='r' c='decode_lowdelay'/>
<use f='ffmpeg/libavcodec/dnxhddec.c' l='632' u='r' c='dnxhd_decode_frame'/>
<use f='ffmpeg/libavcodec/dnxhdenc.c' l='900' u='r' c='dnxhd_encode_rdo'/>
<use f='ffmpeg/libavcodec/dnxhdenc.c' l='988' u='r' c='dnxhd_find_qscale'/>
<use f='ffmpeg/libavcodec/dnxhdenc.c' l='1119' u='r' c='dnxhd_encode_fast'/>
<use f='ffmpeg/libavcodec/dnxhdenc.c' l='1195' u='r' c='dnxhd_encode_picture'/>
<use f='ffmpeg/libavcodec/dxv.c' l='449' u='r' c='dxv_decode'/>
<use f='ffmpeg/libavcodec/exr.c' l='1711' u='r' c='decode_frame'/>
<use f='ffmpeg/libavcodec/hapdec.c' l='339' u='r' c='hap_decode'/>
<use f='ffmpeg/libavcodec/hapdec.c' l='359' u='r' c='hap_decode'/>
<use f='ffmpeg/libavcodec/hevc.c' l='2542' u='r' c='hls_slice_data_wpp'/>
<use f='ffmpeg/libavcodec/hqx.c' l='498' u='r' c='hqx_decode_frame'/>
<use f='ffmpeg/libavcodec/jpeg2000dec.c' l='2120' u='r' c='jpeg2000_decode_frame'/>
<use f='ffmpeg/libavcodec/magicyuv.c' l='418' u='r' c='magy_decode_frame'/>
<use f='ffmpeg/libavcodec/options.c' l='119' u='w' c='init_context_defaults'/>
<use f='ffmpeg/libavcodec/proresdec2.c' l='618' u='r' c='decode_picture'/>
<use f='ffmpeg/libavcodec/proresenc_kostya.c' l='1005' u='r' c='encode_frame'/>
<use f='ffmpeg/libavcodec/pthread_slice.c' l='242' u='w' c='ff_slice_thread_init'/>
<use f='ffmpeg/libavcodec/vp56.c' l='572' u='r' c='ff_vp56_decode_frame'/>
<use f='ffmpeg/libavcodec/vp8.c' l='2656' u='r' c='vp78_decode_frame'/>
<use f='ffmpeg/libavcodec/vp8.c' l='2659' u='r' c='vp78_decode_frame'/>
<dec f='include/libavcodec/avcodec.h' l='2793' type='int (*)(struct AVCodecContext *, int (*)(struct AVCodecContext *, void *, int, int), void *, int *, int)'/>
<offset>7424</offset>
<doc f='include/libavcodec/avcodec.h' l='2775'>/**
     * The codec may call this to execute several independent things.
     * It will return only after finishing all tasks.
     * The user may replace this with some multithreaded implementation,
     * the default implementation will execute the parts serially.
     * Also see avcodec_thread_init and e.g. the --enable-pthread configure option.
     * @param c context passed also to func
     * @param count the number of things to execute
     * @param arg2 argument passed unchanged to func
     * @param ret return values of executed functions, must have space for &quot;count&quot; values. May be NULL.
     * @param func function that will be called count times, with jobnr from 0 to count-1.
     *             threadnr will be in the range 0 to c-&gt;thread_count-1 &lt; MAX_THREADS and so that no
     *             two instances of func executing at the same time will have the same threadnr.
     * @return always 0 currently, but code should handle a future improvement where when any call to func
     *         returns &lt; 0 no further calls to func may be done and &lt; 0 is returned.
     * - encoding: Set by libavcodec, user can override.
     * - decoding: Set by libavcodec, user can override.
     */</doc>
