<dec f='ffmpeg/libavutil/error.h' l='97' type='int av_strerror(int errnum, char * errbuf, size_t errbuf_size)'/>
<use f='ffmpeg/libavutil/error.h' l='111' u='c' c='av_make_error_string'/>
<doc f='ffmpeg/libavutil/error.h' l='85'>/**
 * Put a description of the AVERROR code errnum in errbuf.
 * In case of failure the global variable errno is set to indicate the
 * error. Even in case of failure av_strerror() will print a generic
 * error message indicating the errnum provided to errbuf.
 *
 * @param errnum      error code to describe
 * @param errbuf      buffer to which description is written
 * @param errbuf_size the size in bytes of errbuf
 * @return 0 on success, a negative value if a description for errnum
 * cannot be found
 */</doc>
<use f='ffmpeg/libavdevice/xcbgrab.c' l='241' u='c' c='xcbgrab_frame_shm'/>
<use f='ffmpeg/libavfilter/f_metadata.c' l='259' u='c' c='init'/>
<use f='ffmpeg/cmdutils.c' l='1051' u='c' c='print_error'/>
<use f='ffmpeg/ffmpeg.c' l='4389' u='c' c='transcode'/>
<use f='ffmpeg/ffmpeg_opt.c' l='3205' u='c' c='ffmpeg_parse_options'/>
<use f='ffmpeg/ffprobe.c' l='2537' u='c' c='show_error'/>
<use f='ffmpeg/libavfilter/vf_psnr.c' l='240' u='c' c='init'/>
<use f='ffmpeg/libavfilter/vf_ssim.c' l='234' u='c' c='init'/>
<use f='ffmpeg/libavformat/crypto.c' l='326' u='c' c='crypto_seek'/>
<use f='ffmpeg/libavformat/network.c' l='267' u='c' c='ff_listen_connect'/>
<use f='ffmpeg/libavformat/udp.c' l='160' u='c' c='log_net_error'/>
<def f='ffmpeg/libavutil/error.c' l='105' type='int av_strerror(int errnum, char * errbuf, size_t errbuf_size)'/>
<use f='ffmpeg/libavutil/file.c' l='62' u='c' c='av_file_map'/>
<use f='ffmpeg/libavutil/file.c' l='69' u='c' c='av_file_map'/>
<use f='ffmpeg/libavutil/file.c' l='88' u='c' c='av_file_map'/>
<dec f='include/libavutil/error.h' l='77' type='int av_strerror(int errnum, char * errbuf, size_t errbuf_size)'/>
<doc f='include/libavutil/error.h' l='65'>/**
 * Put a description of the AVERROR code errnum in errbuf.
 * In case of failure the global variable errno is set to indicate the
 * error. Even in case of failure av_strerror() will print a generic
 * error message indicating the errnum provided to errbuf.
 *
 * @param errnum      error code to describe
 * @param errbuf      buffer to which description is written
 * @param errbuf_size the size in bytes of errbuf
 * @return 0 on success, a negative value if a description for errnum
 * cannot be found
 */</doc>
